Search.setIndex({"docnames": ["examples", "index", "libm2k"], "filenames": ["examples.rst", "index.rst", "libm2k.rst"], "titles": ["libm2k Examples", "libm2k documentation - Library for interfacing with the ADALM2000", "libm2k Module"], "terms": {"gener": [0, 1, 2], "data": [0, 2], "us": [0, 2], "adalm2000": [0, 2], "dac": [0, 2], "acquir": 0, "adc": [0, 2], "thi": [0, 2], "assum": 0, "follow": 0, "connect": [0, 2], "w1": 0, "1": [0, 2], "w2": 0, "2": [0, 2], "gnd": 0, "The": [0, 2], "applic": 0, "sine": 0, "triangular": 0, "wave": 0, "signal": [0, 2], "i": [0, 2], "fed": 0, "back": [0, 2], "analog": [0, 1, 2], "input": [0, 2], "voltag": [0, 2], "valu": [0, 2], "ar": [0, 2], "displai": 0, "screen": 0, "import": 0, "matplotlib": 0, "pyplot": 0, "plt": 0, "time": [0, 2], "numpi": 0, "np": 0, "ctx": [0, 2], "m2kopen": [0, 1, 2], "none": [0, 2], "print": 0, "error": [0, 2], "No": [0, 2], "devic": [0, 2], "avail": [0, 2], "your": 0, "pc": 0, "exit": 0, "calibrateadc": [0, 2], "calibratedac": [0, 2], "ain": 0, "getanalogin": [0, 2], "aout": 0, "getanalogout": [0, 2], "trig": 0, "gettrigg": [0, 2], "enablechannel": [0, 2], "0": [0, 2], "true": [0, 2], "setsampler": [0, 2], "100000": 0, "setrang": [0, 2], "10": 0, "uncom": 0, "block": [0, 2], "enabl": [0, 2], "trigger": [0, 2], "setanalogsourc": [0, 2], "channel": [0, 1, 2], "sourc": [0, 2], "setanalogcondit": [0, 2], "rising_edge_analog": 0, "setanaloglevel": [0, 2], "5": [0, 2], "set": [0, 1, 2], "level": [0, 2], "setanalogdelai": [0, 2], "center": 0, "setanalogmod": [0, 2], "750000": 0, "x": [0, 2], "linspac": 0, "pi": 0, "1024": [0, 2], "buffer1": 0, "00": 0, "buffer2": 0, "sin": 0, "buffer": [0, 2], "setcycl": [0, 2], "push": [0, 2], "rang": [0, 2], "get": [0, 2], "sampl": [0, 2], "quit": 0, "getsampl": [0, 2], "1000": [0, 2], "plot": 0, "show": 0, "sleep": 0, "contextclos": [0, 1, 2], "other": [0, 2], "python": 0, "repositori": 0, "modul": 1, "alwai": [1, 2], "calibration_paramet": [1, 2], "channel_1": [1, 2], "channel_2": [1, 2], "context_info": [1, 2], "context": [1, 2], "contextbuild": [1, 2], "contextbuilder_contextclos": [1, 2], "contextbuilder_contextcloseal": [1, 2], "contextbuilder_contextopen": [1, 2], "contextbuilder_enablelog": [1, 2], "contextbuilder_getallcontext": [1, 2], "contextbuilder_getcontextsinfo": [1, 2], "contextbuilder_getvers": [1, 2], "contextbuilder_m2kopen": [1, 2], "dmm": [1, 2], "dmmread": [1, 2], "dmm_read": [1, 2], "extern": [1, 2], "fmcomm": [1, 2], "genericanalogin": [1, 2], "genericanalogout": [1, 2], "iio_context_vers": [1, 2], "iio_object": [1, 2], "iiobuff": [1, 2], "iiochannel": [1, 2], "iiodevic": [1, 2], "m2k": [1, 2], "m2kanalogin": [1, 2], "m2kanalogout": [1, 2], "m2kcalibr": [1, 2], "m2kconditionanalog": [1, 2], "m2kconditiondigit": [1, 2], "m2kdigit": [1, 2], "m2khardwaretrigg": [1, 2], "m2kmode": [1, 2], "m2kpowersuppli": [1, 2], "no_sourc": [1, 2], "pairdd": [1, 2], "select_analog_in": [1, 2], "select_digital_in": [1, 2], "select_non": [1, 2], "select_trigger_in": [1, 2], "src_analog_in": [1, 2], "src_digital_in": [1, 2], "src_disabl": [1, 2], "src_none": [1, 2], "src_trigger_in": [1, 2], "swigpyiter": [1, 2], "vectorctxinfo": [1, 2], "vectord": [1, 2], "vectori": [1, 2], "vectorpairdd": [1, 2], "vector": [1, 2], "vectorstr": [1, 2], "vectoru": [1, 2], "vectorvectord": [1, 2], "vectorvectori": [1, 2], "vectorvector": [1, 2], "vectorvectoru": [1, 2], "contextcloseal": [1, 2], "contextopen": [1, 2], "enablelog": [1, 2], "getallcontext": [1, 2], "getcontextsinfo": [1, 2], "getvers": [1, 2], "ini_device_struct": [1, 2], "m2k_except": [1, 2], "m2k_exception_build": [1, 2], "m2k_exception_mak": [1, 2], "throw_except": [1, 2], "exampl": 1, "index": [1, 2], "search": 1, "page": 1, "disabl": 2, "condit": 2, "specifi": 2, "onli": 2, "ch1": 2, "ch2": 2, "class": 2, "base": 2, "object": 2, "calibr": 2, "paramet": 2, "properti": 2, "adc_gain_ch_1": 2, "gain": 2, "adc_gain_ch_2": 2, "adc_offset_ch_1": 2, "offset": 2, "adc_offset_ch_2": 2, "dac_a_gain": 2, "dac_a_offset": 2, "dac_b_gain": 2, "dac_b_offset": 2, "thisown": 2, "membership": 2, "flag": 2, "event": 2, "analogin": 2, "interfac": 2, "addit": 2, "inform": 2, "about": 2, "id_product": 2, "product": 2, "id": 2, "extract": 2, "from": 2, "iio": 2, "id_vendor": 2, "vendor": 2, "manufactur": 2, "name": 2, "serial": 2, "number": 2, "uri": 2, "arg": 2, "kwarg": 2, "deiniti": 2, "getalldevic": 2, "retriev": 2, "all": 2, "rtype": 2, "std": 2, "unordered_set": 2, "string": 2, "return": 2, "list": 2, "contain": 2, "getalldmm": 2, "alloc": 2, "A": 2, "getavailablecontextattribut": 2, "attribut": 2, "getcontextattributevalu": 2, "attr": 2, "one": 2, "type": 2, "param": 2, "requir": 2, "On": 2, "success": 2, "rais": 2, "throw": 2, "an": 2, "except": 2, "found": 2, "getcontextdescript": 2, "detail": 2, "descript": 2, "current": 2, "getdmm": 2, "overload": 2, "certain": 2, "int": 2, "correspond": 2, "pointer": 2, "nullptr": 2, "which": 2, "ha": 2, "provid": 2, "getdmmcount": 2, "unsign": 2, "repres": 2, "getfirmwarevers": 2, "firmwar": 2, "version": 2, "getiiocontext": 2, "iio_context": 2, "getiiocontextvers": 2, "backend": 2, "struct": 2, "getserialnumb": 2, "geturi": 2, "ex": 2, "usb": 2, "3": 2, "ip": 2, "192": 2, "168": 2, "logallattribut": 2, "log": 2, "note": 2, "system": 2, "should": 2, "reset": 2, "settimeout": 2, "timeout": 2, "o": 2, "oper": 2, "posit": 2, "integ": 2, "millisecond": 2, "after": 2, "occur": 2, "togener": 2, "convert": 2, "possibl": 2, "tom2k": 2, "static": 2, "arg1": 2, "deinit": 2, "getallchannel": 2, "getnam": 2, "": 2, "readal": 2, "structur": 2, "each": 2, "readchannel": 2, "given": 2, "chn_name": 2, "append": 2, "assign": 2, "n": 2, "begin": 2, "capac": 2, "clear": 2, "empti": 2, "end": 2, "eras": 2, "front": 2, "get_alloc": 2, "insert": 2, "iter": 2, "pop": 2, "pop_back": 2, "push_back": 2, "rbegin": 2, "rend": 2, "reserv": 2, "resiz": 2, "size": 2, "swap": 2, "v": 2, "unit_nam": 2, "unit": 2, "measur": 2, "unit_symbol": 2, "symbol": 2, "ti": 2, "getanalogincount": 2, "getanalogoutcount": 2, "getavailablesampler": 2, "getdevicenam": 2, "getiioobject": 2, "getmaximumsampler": 2, "getnbchannel": 2, "getsampler": 2, "getsamplesinterleav": 2, "nb_sampl": 2, "getsamplesrawinterleav": 2, "setkernelbufferscount": 2, "count": 2, "chnidx": 2, "getcycl": 2, "chn": 2, "ischannelen": 2, "pushraw": 2, "stop": 2, "git_tag": 2, "git": 2, "tag": 2, "major": 2, "minor": 2, "buffers_rx": 2, "buffers_tx": 2, "channels_in": 2, "channels_out": 2, "boolean": 2, "succc": 2, "otherwis": 2, "fals": 2, "calibratefromcontext": 2, "both": 2, "predefin": 2, "locat": 2, "float": 2, "closest": 2, "temperatur": 2, "lookup": 2, "tabl": 2, "v0": 2, "26": 2, "getadccalibrationgain": 2, "getadccalibrationoffset": 2, "getallanalogin": 2, "getallanalogout": 2, "null": 2, "dev_nam": 2, "If": 2, "doe": 2, "ani": 2, "analogout": 2, "getdaccalibrationgain": 2, "getdaccalibrationoffset": 2, "getdigit": 2, "digit": 2, "exc_invalid_paramet": 2, "getlut": 2, "map": 2, "doubl": 2, "shared_ptr": 2, "less": 2, "pair": 2, "const": 2, "getl": 2, "state": 2, "led": 2, "turn": 2, "getpowersuppli": 2, "powersuppli": 2, "power": 2, "suppli": 2, "hascontextcalibr": 2, "check": 2, "can": 2, "perform": 2, "hasmixedsign": 2, "mix": 2, "acquisit": 2, "iscalibr": 2, "board": 2, "wa": 2, "default": 2, "coeffici": 2, "maximum": 2, "sampler": 2, "oversampl": 2, "ratio": 2, "low": 2, "kernel": 2, "4": 2, "out": 2, "tx": 2, "rx": 2, "need": 2, "afterward": 2, "resetcalibr": 2, "setadccalibrationgain": 2, "overrid": 2, "run": 2, "limit": 2, "hardwar": 2, "setadccalibrationoffset": 2, "setdaccalibrationgain": 2, "setdaccalibrationoffset": 2, "setl": 2, "off": 2, "For": 2, "startmixedsignalacquisit": 2, "initi": 2, "stopmixedsignalacquisit": 2, "cancelacquisit": 2, "cancel": 2, "ongo": 2, "convertrawtovolt": 2, "raw": 2, "volt": 2, "convertvoltstoraw": 2, "getavailablerang": 2, "getchannelnam": 2, "getfiltercompens": 2, "filter": 2, "compens": 2, "rate": 2, "gethysteresisrang": 2, "bound": 2, "hysteresi": 2, "enumer": 2, "lower": 2, "upper": 2, "access": 2, "when": 2, "debug": 2, "directli": 2, "libiio": 2, "getkernelbufferscount": 2, "previous": 2, "save": 2, "session": 2, "getoversamplingratio": 2, "global": 2, "chn_idx": 2, "getrang": 2, "getrangelimit": 2, "specif": 2, "due": 2, "must": 2, "multipl": 2, "greater": 2, "than": 2, "16": 2, "refer": 2, "own": 2, "creat": 2, "client": 2, "clean": 2, "fill": 2, "nb_samples_per_channel": 2, "interleav": 2, "befor": 2, "automat": 2, "arrai": 2, "finish": 2, "getsamplesraw": 2, "getscalingfactor": 2, "ch": 2, "scale": 2, "factor": 2, "handler": 2, "getvalueforrang": 2, "numer": 2, "getverticaloffset": 2, "getvoltag": 2, "averag": 2, "getvoltageraw": 2, "short": 2, "setoversamplingratio": 2, "min": 2, "max": 2, "setverticaloffset": 2, "vertoffset": 2, "vertic": 2, "startacquisit": 2, "start": 2, "stopacquisit": 2, "destroi": 2, "cancelbuff": 2, "write": 2, "exc_out_of_rang": 2, "getbufferrearmontrigg": 2, "control": 2, "rearm": 2, "share": 2, "between": 2, "33": 2, "cyclic": 2, "mode": 2, "getsynceddma": 2, "getsyncedstartdma": 2, "ispushdon": 2, "non": 2, "done": 2, "process": 2, "function": 2, "take": 2, "consider": 2, "new": 2, "without": 2, "unplug": 2, "modifi": 2, "previou": 2, "call": 2, "order": 2, "comput": 2, "again": 2, "newer": 2, "23": 2, "send": 2, "stream": 2, "won": 2, "t": 2, "synchron": 2, "per": 2, "repeat": 2, "until": 2, "reach": 2, "pushrawbyt": 2, "setbufferrearmontrigg": 2, "allow": 2, "sequenti": 2, "output": 2, "sent": 2, "onc": 2, "opt": 2, "concaten": 2, "small": 2, "singl": 2, "avoid": 2, "problem": 2, "In": 2, "continu": 2, "everi": 2, "idl": 2, "first": 2, "next": 2, "en": 2, "oversampling_ratio": 2, "setsynceddma": 2, "setsyncedstartdma": 2, "setvoltag": 2, "actual": 2, "scenario": 2, "where": 2, "dma": 2, "activ": 2, "revert": 2, "setvoltageraw": 2, "down": 2, "calibrateal": 2, "cancelcalibr": 2, "getadccalibr": 2, "getadcgain": 2, "getadcoffset": 2, "getdaccalibr": 2, "getdacgain": 2, "getdacoffset": 2, "isiniti": 2, "setadcgain": 2, "setadcoffset": 2, "setdacgain": 2, "setdacoffset": 2, "anychannelen": 2, "dir": 2, "least": 2, "direct": 2, "cancelbufferout": 2, "enableallout": 2, "affect": 2, "getdirect": 2, "dio_direct": 2, "indic": 2, "getnbchannelsin": 2, "IN": 2, "getnbchannelsout": 2, "getoutputmod": 2, "getsampleratein": 2, "getsamplerateout": 2, "getsamplesp": 2, "getvalueraw": 2, "dio_level": 2, "isclocksourceextern": 2, "clocksourc": 2, "pushbyt": 2, "resetratemux": 2, "setdirect": 2, "mask": 2, "bitmask": 2, "bit": 2, "same": 2, "setexternalclocksourc": 2, "intern": 2, "setkernelbufferscountin": 2, "setkernelbufferscountout": 2, "setoutputmod": 2, "setratemux": 2, "forc": 2, "setsampleratein": 2, "setsamplerateout": 2, "setvalueraw": 2, "stopbufferout": 2, "getanalogcondit": 2, "getanalogdelai": 2, "delai": 2, "have": 2, "neg": 2, "place": 2, "insid": 2, "middl": 2, "you": 2, "500": 2, "minimum": 2, "8192": 2, "tbd": 2, "getanalogexternalcondit": 2, "m2k_trigger_condition_digit": 2, "getanalogexternaloutselect": 2, "forward": 2, "TO": 2, "pin": 2, "m2k_trigger_out_select": 2, "24": 2, "getanaloghysteresi": 2, "getanaloglevel": 2, "getanaloglevelraw": 2, "getanalogmod": 2, "getanalogouttriggercondit": 2, "m2k_trigger_condition_out": 2, "none_out": 2, "low_level_out": 2, "high_level_out": 2, "any_edge_out": 2, "rising_edge_out": 2, "falling_edge_out": 2, "getanalogouttriggersourc": 2, "m2k_trigger_source_out": 2, "trigger_non": 2, "trigger_ti": 2, "trigger_adc": 2, "trigger_la": 2, "getanalogouttriggerstatu": 2, "action": 2, "m2k_trigger_status_analog_out": 2, "getanalogsourc": 2, "channel1": 2, "channel2": 2, "etc": 2, "getanalogsourcechannel": 2, "getanalogstreamingflag": 2, "part": 2, "whether": 2, "getcurrenthwset": 2, "getdigitalcondit": 2, "getdigitaldelai": 2, "getdigitalexternalcondit": 2, "getdigitalmod": 2, "dio_or": 2, "dio_and": 2, "getdigitalsourc": 2, "digitalin": 2, "m2k_trigger_source_digit": 2, "getdigitalstreamingflag": 2, "hascrossinstrumenttrigg": 2, "hasexternaltriggerin": 2, "hasexternaltriggerout": 2, "cond": 2, "setanalogexternalcondit": 2, "setanalogexternaloutselect": 2, "output_select": 2, "select": 2, "what": 2, "redirect": 2, "option": 2, "setanaloghysteresi": 2, "v_level": 2, "setanaloglevelraw": 2, "setanalogouttriggercondit": 2, "configur": 2, "trigger_ti_0": 2, "ignor": 2, "setanalogouttriggersourc": 2, "src": 2, "setanalogouttriggerstatu": 2, "statu": 2, "defin": 2, "setanalogsourcechannel": 2, "setanalogstreamingflag": 2, "setcalibparamet": 2, "vert_offset": 2, "setdigitalcondit": 2, "setdigitaldelai": 2, "setdigitalexternalcondit": 2, "setdigitalmod": 2, "setdigitalsourc": 2, "external_src": 2, "setdigitalstreamingflag": 2, "might": 2, "old": 2, "sethwtriggerset": 2, "succ": 2, "enableal": 2, "powerdowndac": 2, "powerdown": 2, "pushchannel": 2, "up": 2, "5v": 2, "written": 2, "read": 2, "transmit": 2, "9": 2, "second": 2, "analog_condit": 2, "digital_condit": 2, "raw_level": 2, "trigger_sourc": 2, "advanc": 2, "copi": 2, "decr": 2, "distanc": 2, "equal": 2, "incr": 2, "m_channel": 2, "iio_channel": 2, "m_direct": 2, "close": 2, "info": 2, "librari": 2, "hw_name": 2, "key_val_pair": 2, "open": 2, "describ": 2, "someth": 2, "similar": 2, "6": 2, "exist": 2, "try": 2, "file": 2, "iiocod": 2, "line": 2, "make": 2, "build": 2, "filenam": 2, "code": 2, "linenumb": 2}, "objects": {"": [[2, 0, 0, "-", "libm2k"]], "libm2k": [[2, 1, 1, "", "ALWAYS"], [2, 1, 1, "", "ANALOG"], [2, 2, 1, "", "CALIBRATION_PARAMETERS"], [2, 1, 1, "", "CHANNEL_1"], [2, 1, 1, "", "CHANNEL_2"], [2, 2, 1, "", "CONTEXT_INFO"], [2, 2, 1, "", "Context"], [2, 2, 1, "", "ContextBuilder"], [2, 5, 1, "", "ContextBuilder_contextClose"], [2, 5, 1, "", "ContextBuilder_contextCloseAll"], [2, 5, 1, "", "ContextBuilder_contextOpen"], [2, 5, 1, "", "ContextBuilder_enableLogging"], [2, 5, 1, "", "ContextBuilder_getAllContexts"], [2, 5, 1, "", "ContextBuilder_getContextsInfo"], [2, 5, 1, "", "ContextBuilder_getVersion"], [2, 5, 1, "", "ContextBuilder_m2kOpen"], [2, 2, 1, "", "DMM"], [2, 2, 1, "", "DMMReading"], [2, 2, 1, "", "DMM_READING"], [2, 2, 1, "", "DMMs"], [2, 1, 1, "", "EXTERNAL"], [2, 2, 1, "", "FMCOMMS"], [2, 2, 1, "", "Generic"], [2, 2, 1, "", "GenericAnalogIn"], [2, 2, 1, "", "GenericAnalogOut"], [2, 2, 1, "", "IIO_CONTEXT_VERSION"], [2, 2, 1, "", "IIO_OBJECTS"], [2, 2, 1, "", "IioBuffers"], [2, 2, 1, "", "IioChannels"], [2, 2, 1, "", "IioDevices"], [2, 2, 1, "", "M2k"], [2, 2, 1, "", "M2kAnalogIn"], [2, 2, 1, "", "M2kAnalogIns"], [2, 2, 1, "", "M2kAnalogOut"], [2, 2, 1, "", "M2kAnalogOuts"], [2, 2, 1, "", "M2kCalibration"], [2, 2, 1, "", "M2kConditionAnalog"], [2, 2, 1, "", "M2kConditionDigital"], [2, 2, 1, "", "M2kDigital"], [2, 2, 1, "", "M2kHardwareTrigger"], [2, 2, 1, "", "M2kModes"], [2, 2, 1, "", "M2kPowerSupply"], [2, 1, 1, "", "NO_SOURCE"], [2, 2, 1, "", "PairDD"], [2, 1, 1, "", "SELECT_ANALOG_IN"], [2, 1, 1, "", "SELECT_DIGITAL_IN"], [2, 1, 1, "", "SELECT_NONE"], [2, 1, 1, "", "SELECT_TRIGGER_IN"], [2, 2, 1, "", "SETTINGS"], [2, 1, 1, "", "SRC_ANALOG_IN"], [2, 1, 1, "", "SRC_DIGITAL_IN"], [2, 1, 1, "", "SRC_DISABLED"], [2, 1, 1, "", "SRC_NONE"], [2, 1, 1, "", "SRC_TRIGGER_IN"], [2, 2, 1, "", "SwigPyIterator"], [2, 2, 1, "", "VectorCtxInfo"], [2, 2, 1, "", "VectorD"], [2, 2, 1, "", "VectorI"], [2, 2, 1, "", "VectorPairDD"], [2, 2, 1, "", "VectorS"], [2, 2, 1, "", "VectorStr"], [2, 2, 1, "", "VectorUS"], [2, 2, 1, "", "VectorVectorD"], [2, 2, 1, "", "VectorVectorI"], [2, 2, 1, "", "VectorVectorS"], [2, 2, 1, "", "VectorVectorUS"], [2, 2, 1, "", "channel"], [2, 5, 1, "", "contextClose"], [2, 5, 1, "", "contextCloseAll"], [2, 5, 1, "", "contextOpen"], [2, 5, 1, "", "enableLogging"], [2, 5, 1, "", "getAllContexts"], [2, 5, 1, "", "getContextsInfo"], [2, 5, 1, "", "getVersion"], [2, 2, 1, "", "ini_device_struct"], [2, 5, 1, "", "m2kOpen"], [2, 2, 1, "", "m2k_exception"], [2, 2, 1, "", "m2k_exception_builder"], [2, 5, 1, "", "m2k_exception_make"], [2, 5, 1, "", "throw_exception"]], "libm2k.CALIBRATION_PARAMETERS": [[2, 3, 1, "", "adc_gain_ch_1"], [2, 3, 1, "", "adc_gain_ch_2"], [2, 3, 1, "", "adc_offset_ch_1"], [2, 3, 1, "", "adc_offset_ch_2"], [2, 3, 1, "", "dac_a_gain"], [2, 3, 1, "", "dac_a_offset"], [2, 3, 1, "", "dac_b_gain"], [2, 3, 1, "", "dac_b_offset"], [2, 3, 1, "", "thisown"]], "libm2k.CONTEXT_INFO": [[2, 3, 1, "", "id_product"], [2, 3, 1, "", "id_vendor"], [2, 3, 1, "", "manufacturer"], [2, 3, 1, "", "product"], [2, 3, 1, "", "serial"], [2, 3, 1, "", "thisown"], [2, 3, 1, "", "uri"]], "libm2k.Context": [[2, 4, 1, "", "deinitialize"], [2, 4, 1, "", "getAllDevices"], [2, 4, 1, "", "getAllDmm"], [2, 4, 1, "", "getAvailableContextAttributes"], [2, 4, 1, "", "getContextAttributeValue"], [2, 4, 1, "", "getContextDescription"], [2, 4, 1, "", "getDMM"], [2, 4, 1, "", "getDmmCount"], [2, 4, 1, "", "getFirmwareVersion"], [2, 4, 1, "", "getIioContext"], [2, 4, 1, "", "getIioContextVersion"], [2, 4, 1, "", "getSerialNumber"], [2, 4, 1, "", "getUri"], [2, 4, 1, "", "logAllAttributes"], [2, 4, 1, "", "reset"], [2, 4, 1, "", "setTimeout"], [2, 3, 1, "", "thisown"], [2, 4, 1, "", "toGeneric"], [2, 4, 1, "", "toM2k"]], "libm2k.ContextBuilder": [[2, 4, 1, "", "contextClose"], [2, 4, 1, "", "contextCloseAll"], [2, 4, 1, "", "contextOpen"], [2, 4, 1, "", "enableLogging"], [2, 4, 1, "", "getAllContexts"], [2, 4, 1, "", "getContextsInfo"], [2, 4, 1, "", "getVersion"], [2, 4, 1, "", "m2kOpen"], [2, 3, 1, "", "thisown"]], "libm2k.DMM": [[2, 4, 1, "", "getAllChannels"], [2, 4, 1, "", "getName"], [2, 4, 1, "", "readAll"], [2, 4, 1, "", "readChannel"], [2, 4, 1, "", "reset"], [2, 3, 1, "", "thisown"]], "libm2k.DMMReading": [[2, 4, 1, "", "append"], [2, 4, 1, "", "assign"], [2, 4, 1, "", "back"], [2, 4, 1, "", "begin"], [2, 4, 1, "", "capacity"], [2, 4, 1, "", "clear"], [2, 4, 1, "", "empty"], [2, 4, 1, "", "end"], [2, 4, 1, "", "erase"], [2, 4, 1, "", "front"], [2, 4, 1, "", "get_allocator"], [2, 4, 1, "", "insert"], [2, 4, 1, "", "iterator"], [2, 4, 1, "", "pop"], [2, 4, 1, "", "pop_back"], [2, 4, 1, "", "push_back"], [2, 4, 1, "", "rbegin"], [2, 4, 1, "", "rend"], [2, 4, 1, "", "reserve"], [2, 4, 1, "", "resize"], [2, 4, 1, "", "size"], [2, 4, 1, "", "swap"], [2, 3, 1, "", "thisown"]], "libm2k.DMM_READING": [[2, 3, 1, "", "id"], [2, 3, 1, "", "name"], [2, 3, 1, "", "thisown"], [2, 3, 1, "", "unit_name"], [2, 3, 1, "", "unit_symbol"], [2, 3, 1, "", "value"]], "libm2k.DMMs": [[2, 4, 1, "", "append"], [2, 4, 1, "", "assign"], [2, 4, 1, "", "back"], [2, 4, 1, "", "begin"], [2, 4, 1, "", "capacity"], [2, 4, 1, "", "clear"], [2, 4, 1, "", "empty"], [2, 4, 1, "", "end"], [2, 4, 1, "", "erase"], [2, 4, 1, "", "front"], [2, 4, 1, "", "get_allocator"], [2, 4, 1, "", "insert"], [2, 4, 1, "", "iterator"], [2, 4, 1, "", "pop"], [2, 4, 1, "", "pop_back"], [2, 4, 1, "", "push_back"], [2, 4, 1, "", "rbegin"], [2, 4, 1, "", "rend"], [2, 4, 1, "", "reserve"], [2, 4, 1, "", "resize"], [2, 4, 1, "", "size"], [2, 4, 1, "", "swap"], [2, 3, 1, "", "thisown"]], "libm2k.FMCOMMS": [[2, 3, 1, "", "thisown"]], "libm2k.Generic": [[2, 4, 1, "", "getAnalogIn"], [2, 4, 1, "", "getAnalogInCount"], [2, 4, 1, "", "getAnalogOut"], [2, 4, 1, "", "getAnalogOutCount"], [2, 3, 1, "", "thisown"]], "libm2k.GenericAnalogIn": [[2, 4, 1, "", "enableChannel"], [2, 4, 1, "", "getAvailableSampleRates"], [2, 4, 1, "", "getDeviceName"], [2, 4, 1, "", "getIioObjects"], [2, 4, 1, "", "getMaximumSamplerate"], [2, 4, 1, "", "getNbChannels"], [2, 4, 1, "", "getSampleRate"], [2, 4, 1, "", "getSamplesInterleaved"], [2, 4, 1, "", "getSamplesRawInterleaved"], [2, 4, 1, "", "setKernelBuffersCount"], [2, 4, 1, "", "setSampleRate"], [2, 3, 1, "", "thisown"]], "libm2k.GenericAnalogOut": [[2, 4, 1, "", "enableChannel"], [2, 4, 1, "", "getAvailableSampleRates"], [2, 4, 1, "", "getCyclic"], [2, 4, 1, "", "getName"], [2, 4, 1, "", "getSampleRate"], [2, 4, 1, "", "isChannelEnabled"], [2, 4, 1, "", "push"], [2, 4, 1, "", "pushRaw"], [2, 4, 1, "", "setCyclic"], [2, 4, 1, "", "setSampleRate"], [2, 4, 1, "", "stop"], [2, 3, 1, "", "thisown"]], "libm2k.IIO_CONTEXT_VERSION": [[2, 3, 1, "", "git_tag"], [2, 3, 1, "", "major"], [2, 3, 1, "", "minor"], [2, 3, 1, "", "thisown"]], "libm2k.IIO_OBJECTS": [[2, 3, 1, "", "buffers_rx"], [2, 3, 1, "", "buffers_tx"], [2, 3, 1, "", "channels_in"], [2, 3, 1, "", "channels_out"], [2, 3, 1, "", "context"], [2, 3, 1, "", "devices"], [2, 3, 1, "", "thisown"]], "libm2k.IioBuffers": [[2, 4, 1, "", "append"], [2, 4, 1, "", "assign"], [2, 4, 1, "", "back"], [2, 4, 1, "", "begin"], [2, 4, 1, "", "capacity"], [2, 4, 1, "", "clear"], [2, 4, 1, "", "empty"], [2, 4, 1, "", "end"], [2, 4, 1, "", "erase"], [2, 4, 1, "", "front"], [2, 4, 1, "", "get_allocator"], [2, 4, 1, "", "insert"], [2, 4, 1, "", "iterator"], [2, 4, 1, "", "pop"], [2, 4, 1, "", "pop_back"], [2, 4, 1, "", "push_back"], [2, 4, 1, "", "rbegin"], [2, 4, 1, "", "rend"], [2, 4, 1, "", "reserve"], [2, 4, 1, "", "resize"], [2, 4, 1, "", "size"], [2, 4, 1, "", "swap"], [2, 3, 1, "", "thisown"]], "libm2k.IioChannels": [[2, 4, 1, "", "append"], [2, 4, 1, "", "assign"], [2, 4, 1, "", "back"], [2, 4, 1, "", "begin"], [2, 4, 1, "", "capacity"], [2, 4, 1, "", "clear"], [2, 4, 1, "", "empty"], [2, 4, 1, "", "end"], [2, 4, 1, "", "erase"], [2, 4, 1, "", "front"], [2, 4, 1, "", "get_allocator"], [2, 4, 1, "", "insert"], [2, 4, 1, "", "iterator"], [2, 4, 1, "", "pop"], [2, 4, 1, "", "pop_back"], [2, 4, 1, "", "push_back"], [2, 4, 1, "", "rbegin"], [2, 4, 1, "", "rend"], [2, 4, 1, "", "reserve"], [2, 4, 1, "", "resize"], [2, 4, 1, "", "size"], [2, 4, 1, "", "swap"], [2, 3, 1, "", "thisown"]], "libm2k.IioDevices": [[2, 4, 1, "", "append"], [2, 4, 1, "", "assign"], [2, 4, 1, "", "back"], [2, 4, 1, "", "begin"], [2, 4, 1, "", "capacity"], [2, 4, 1, "", "clear"], [2, 4, 1, "", "empty"], [2, 4, 1, "", "end"], [2, 4, 1, "", "erase"], [2, 4, 1, "", "front"], [2, 4, 1, "", "get_allocator"], [2, 4, 1, "", "insert"], [2, 4, 1, "", "iterator"], [2, 4, 1, "", "pop"], [2, 4, 1, "", "pop_back"], [2, 4, 1, "", "push_back"], [2, 4, 1, "", "rbegin"], [2, 4, 1, "", "rend"], [2, 4, 1, "", "reserve"], [2, 4, 1, "", "resize"], [2, 4, 1, "", "size"], [2, 4, 1, "", "swap"], [2, 3, 1, "", "thisown"]], "libm2k.M2k": [[2, 4, 1, "", "calibrate"], [2, 4, 1, "", "calibrateADC"], [2, 4, 1, "", "calibrateDAC"], [2, 4, 1, "", "calibrateFromContext"], [2, 4, 1, "", "deinitialize"], [2, 4, 1, "", "getAdcCalibrationGain"], [2, 4, 1, "", "getAdcCalibrationOffset"], [2, 4, 1, "", "getAllAnalogIn"], [2, 4, 1, "", "getAllAnalogOut"], [2, 4, 1, "", "getAnalogIn"], [2, 4, 1, "", "getAnalogOut"], [2, 4, 1, "", "getDacCalibrationGain"], [2, 4, 1, "", "getDacCalibrationOffset"], [2, 4, 1, "", "getDigital"], [2, 4, 1, "", "getLUT"], [2, 4, 1, "", "getLed"], [2, 4, 1, "", "getPowerSupply"], [2, 4, 1, "", "hasContextCalibration"], [2, 4, 1, "", "hasMixedSignal"], [2, 4, 1, "", "isCalibrated"], [2, 4, 1, "", "reset"], [2, 4, 1, "", "resetCalibration"], [2, 4, 1, "", "setAdcCalibrationGain"], [2, 4, 1, "", "setAdcCalibrationOffset"], [2, 4, 1, "", "setDacCalibrationGain"], [2, 4, 1, "", "setDacCalibrationOffset"], [2, 4, 1, "", "setLed"], [2, 4, 1, "", "startMixedSignalAcquisition"], [2, 4, 1, "", "stopMixedSignalAcquisition"], [2, 3, 1, "", "thisown"]], "libm2k.M2kAnalogIn": [[2, 4, 1, "", "cancelAcquisition"], [2, 4, 1, "", "convertRawToVolts"], [2, 4, 1, "", "convertVoltsToRaw"], [2, 4, 1, "", "enableChannel"], [2, 4, 1, "", "getAvailableRanges"], [2, 4, 1, "", "getAvailableSampleRates"], [2, 4, 1, "", "getChannelName"], [2, 4, 1, "", "getFilterCompensation"], [2, 4, 1, "", "getHysteresisRange"], [2, 4, 1, "", "getIioObjects"], [2, 4, 1, "", "getKernelBuffersCount"], [2, 4, 1, "", "getMaximumSamplerate"], [2, 4, 1, "", "getName"], [2, 4, 1, "", "getNbChannels"], [2, 4, 1, "", "getOversamplingRatio"], [2, 4, 1, "", "getRange"], [2, 4, 1, "", "getRangeLimits"], [2, 4, 1, "", "getSampleRate"], [2, 4, 1, "", "getSamples"], [2, 4, 1, "", "getSamplesInterleaved"], [2, 4, 1, "", "getSamplesRaw"], [2, 4, 1, "", "getSamplesRawInterleaved"], [2, 4, 1, "", "getScalingFactor"], [2, 4, 1, "", "getTrigger"], [2, 4, 1, "", "getValueForRange"], [2, 4, 1, "", "getVerticalOffset"], [2, 4, 1, "", "getVoltage"], [2, 4, 1, "", "getVoltageRaw"], [2, 4, 1, "", "isChannelEnabled"], [2, 4, 1, "", "reset"], [2, 4, 1, "", "setKernelBuffersCount"], [2, 4, 1, "", "setOversamplingRatio"], [2, 4, 1, "", "setRange"], [2, 4, 1, "", "setSampleRate"], [2, 4, 1, "", "setVerticalOffset"], [2, 4, 1, "", "startAcquisition"], [2, 4, 1, "", "stopAcquisition"], [2, 3, 1, "", "thisown"]], "libm2k.M2kAnalogIns": [[2, 4, 1, "", "append"], [2, 4, 1, "", "assign"], [2, 4, 1, "", "back"], [2, 4, 1, "", "begin"], [2, 4, 1, "", "capacity"], [2, 4, 1, "", "clear"], [2, 4, 1, "", "empty"], [2, 4, 1, "", "end"], [2, 4, 1, "", "erase"], [2, 4, 1, "", "front"], [2, 4, 1, "", "get_allocator"], [2, 4, 1, "", "insert"], [2, 4, 1, "", "iterator"], [2, 4, 1, "", "pop"], [2, 4, 1, "", "pop_back"], [2, 4, 1, "", "push_back"], [2, 4, 1, "", "rbegin"], [2, 4, 1, "", "rend"], [2, 4, 1, "", "reserve"], [2, 4, 1, "", "resize"], [2, 4, 1, "", "size"], [2, 4, 1, "", "swap"], [2, 3, 1, "", "thisown"]], "libm2k.M2kAnalogOut": [[2, 4, 1, "", "cancelBuffer"], [2, 4, 1, "", "convertRawToVolts"], [2, 4, 1, "", "convertVoltsToRaw"], [2, 4, 1, "", "enableChannel"], [2, 4, 1, "", "getAvailableSampleRates"], [2, 4, 1, "", "getBufferRearmOnTrigger"], [2, 4, 1, "", "getChannelName"], [2, 4, 1, "", "getCyclic"], [2, 4, 1, "", "getFilterCompensation"], [2, 4, 1, "", "getIioObjects"], [2, 4, 1, "", "getKernelBuffersCount"], [2, 4, 1, "", "getMaximumSamplerate"], [2, 4, 1, "", "getNbChannels"], [2, 4, 1, "", "getOversamplingRatio"], [2, 4, 1, "", "getSampleRate"], [2, 4, 1, "", "getScalingFactor"], [2, 4, 1, "", "getSyncedDma"], [2, 4, 1, "", "getSyncedStartDma"], [2, 4, 1, "", "getTrigger"], [2, 4, 1, "", "isChannelEnabled"], [2, 4, 1, "", "isPushDone"], [2, 4, 1, "", "push"], [2, 4, 1, "", "pushRaw"], [2, 4, 1, "", "pushRawBytes"], [2, 4, 1, "", "reset"], [2, 4, 1, "", "setBufferRearmOnTrigger"], [2, 4, 1, "", "setCyclic"], [2, 4, 1, "", "setKernelBuffersCount"], [2, 4, 1, "", "setOversamplingRatio"], [2, 4, 1, "", "setSampleRate"], [2, 4, 1, "", "setSyncedDma"], [2, 4, 1, "", "setSyncedStartDma"], [2, 4, 1, "", "setVoltage"], [2, 4, 1, "", "setVoltageRaw"], [2, 4, 1, "", "stop"], [2, 3, 1, "", "thisown"]], "libm2k.M2kAnalogOuts": [[2, 4, 1, "", "append"], [2, 4, 1, "", "assign"], [2, 4, 1, "", "back"], [2, 4, 1, "", "begin"], [2, 4, 1, "", "capacity"], [2, 4, 1, "", "clear"], [2, 4, 1, "", "empty"], [2, 4, 1, "", "end"], [2, 4, 1, "", "erase"], [2, 4, 1, "", "front"], [2, 4, 1, "", "get_allocator"], [2, 4, 1, "", "insert"], [2, 4, 1, "", "iterator"], [2, 4, 1, "", "pop"], [2, 4, 1, "", "pop_back"], [2, 4, 1, "", "push_back"], [2, 4, 1, "", "rbegin"], [2, 4, 1, "", "rend"], [2, 4, 1, "", "reserve"], [2, 4, 1, "", "resize"], [2, 4, 1, "", "size"], [2, 4, 1, "", "swap"], [2, 3, 1, "", "thisown"]], "libm2k.M2kCalibration": [[2, 4, 1, "", "calibrateADC"], [2, 4, 1, "", "calibrateAll"], [2, 4, 1, "", "calibrateDAC"], [2, 4, 1, "", "cancelCalibration"], [2, 4, 1, "", "getAdcCalibrated"], [2, 4, 1, "", "getAdcGain"], [2, 4, 1, "", "getAdcOffset"], [2, 4, 1, "", "getDacCalibrated"], [2, 4, 1, "", "getDacGain"], [2, 4, 1, "", "getDacOffset"], [2, 4, 1, "", "initialize"], [2, 4, 1, "", "isInitialized"], [2, 4, 1, "", "resetCalibration"], [2, 4, 1, "", "setAdcGain"], [2, 4, 1, "", "setAdcOffset"], [2, 4, 1, "", "setDacGain"], [2, 4, 1, "", "setDacOffset"], [2, 3, 1, "", "thisown"]], "libm2k.M2kConditionAnalog": [[2, 4, 1, "", "append"], [2, 4, 1, "", "assign"], [2, 4, 1, "", "back"], [2, 4, 1, "", "begin"], [2, 4, 1, "", "capacity"], [2, 4, 1, "", "clear"], [2, 4, 1, "", "empty"], [2, 4, 1, "", "end"], [2, 4, 1, "", "erase"], [2, 4, 1, "", "front"], [2, 4, 1, "", "get_allocator"], [2, 4, 1, "", "insert"], [2, 4, 1, "", "iterator"], [2, 4, 1, "", "pop"], [2, 4, 1, "", "pop_back"], [2, 4, 1, "", "push_back"], [2, 4, 1, "", "rbegin"], [2, 4, 1, "", "rend"], [2, 4, 1, "", "reserve"], [2, 4, 1, "", "resize"], [2, 4, 1, "", "size"], [2, 4, 1, "", "swap"], [2, 3, 1, "", "thisown"]], "libm2k.M2kConditionDigital": [[2, 4, 1, "", "append"], [2, 4, 1, "", "assign"], [2, 4, 1, "", "back"], [2, 4, 1, "", "begin"], [2, 4, 1, "", "capacity"], [2, 4, 1, "", "clear"], [2, 4, 1, "", "empty"], [2, 4, 1, "", "end"], [2, 4, 1, "", "erase"], [2, 4, 1, "", "front"], [2, 4, 1, "", "get_allocator"], [2, 4, 1, "", "insert"], [2, 4, 1, "", "iterator"], [2, 4, 1, "", "pop"], [2, 4, 1, "", "pop_back"], [2, 4, 1, "", "push_back"], [2, 4, 1, "", "rbegin"], [2, 4, 1, "", "rend"], [2, 4, 1, "", "reserve"], [2, 4, 1, "", "resize"], [2, 4, 1, "", "size"], [2, 4, 1, "", "swap"], [2, 3, 1, "", "thisown"]], "libm2k.M2kDigital": [[2, 4, 1, "", "anyChannelEnabled"], [2, 4, 1, "", "cancelAcquisition"], [2, 4, 1, "", "cancelBufferOut"], [2, 4, 1, "", "enableAllOut"], [2, 4, 1, "", "enableChannel"], [2, 4, 1, "", "getCyclic"], [2, 4, 1, "", "getDirection"], [2, 4, 1, "", "getIioObjects"], [2, 4, 1, "", "getNbChannelsIn"], [2, 4, 1, "", "getNbChannelsOut"], [2, 4, 1, "", "getOutputMode"], [2, 4, 1, "", "getSampleRateIn"], [2, 4, 1, "", "getSampleRateOut"], [2, 4, 1, "", "getSamples"], [2, 4, 1, "", "getSamplesP"], [2, 4, 1, "", "getTrigger"], [2, 4, 1, "", "getValueRaw"], [2, 4, 1, "", "isClocksourceExternal"], [2, 4, 1, "", "push"], [2, 4, 1, "", "pushBytes"], [2, 4, 1, "", "reset"], [2, 4, 1, "", "resetRateMux"], [2, 4, 1, "", "setCyclic"], [2, 4, 1, "", "setDirection"], [2, 4, 1, "", "setExternalClocksource"], [2, 4, 1, "", "setKernelBuffersCountIn"], [2, 4, 1, "", "setKernelBuffersCountOut"], [2, 4, 1, "", "setOutputMode"], [2, 4, 1, "", "setRateMux"], [2, 4, 1, "", "setSampleRateIn"], [2, 4, 1, "", "setSampleRateOut"], [2, 4, 1, "", "setValueRaw"], [2, 4, 1, "", "startAcquisition"], [2, 4, 1, "", "stopAcquisition"], [2, 4, 1, "", "stopBufferOut"], [2, 3, 1, "", "thisown"]], "libm2k.M2kHardwareTrigger": [[2, 4, 1, "", "getAnalogCondition"], [2, 4, 1, "", "getAnalogDelay"], [2, 4, 1, "", "getAnalogExternalCondition"], [2, 4, 1, "", "getAnalogExternalOutSelect"], [2, 4, 1, "", "getAnalogHysteresis"], [2, 4, 1, "", "getAnalogLevel"], [2, 4, 1, "", "getAnalogLevelRaw"], [2, 4, 1, "", "getAnalogMode"], [2, 4, 1, "", "getAnalogOutTriggerCondition"], [2, 4, 1, "", "getAnalogOutTriggerSource"], [2, 4, 1, "", "getAnalogOutTriggerStatus"], [2, 4, 1, "", "getAnalogSource"], [2, 4, 1, "", "getAnalogSourceChannel"], [2, 4, 1, "", "getAnalogStreamingFlag"], [2, 4, 1, "", "getCurrentHwSettings"], [2, 4, 1, "", "getDigitalCondition"], [2, 4, 1, "", "getDigitalDelay"], [2, 4, 1, "", "getDigitalExternalCondition"], [2, 4, 1, "", "getDigitalMode"], [2, 4, 1, "", "getDigitalSource"], [2, 4, 1, "", "getDigitalStreamingFlag"], [2, 4, 1, "", "hasCrossInstrumentTrigger"], [2, 4, 1, "", "hasExternalTriggerIn"], [2, 4, 1, "", "hasExternalTriggerOut"], [2, 4, 1, "", "reset"], [2, 4, 1, "", "setAnalogCondition"], [2, 4, 1, "", "setAnalogDelay"], [2, 4, 1, "", "setAnalogExternalCondition"], [2, 4, 1, "", "setAnalogExternalOutSelect"], [2, 4, 1, "", "setAnalogHysteresis"], [2, 4, 1, "", "setAnalogLevel"], [2, 4, 1, "", "setAnalogLevelRaw"], [2, 4, 1, "", "setAnalogMode"], [2, 4, 1, "", "setAnalogOutTriggerCondition"], [2, 4, 1, "", "setAnalogOutTriggerSource"], [2, 4, 1, "", "setAnalogOutTriggerStatus"], [2, 4, 1, "", "setAnalogSource"], [2, 4, 1, "", "setAnalogSourceChannel"], [2, 4, 1, "", "setAnalogStreamingFlag"], [2, 4, 1, "", "setCalibParameters"], [2, 4, 1, "", "setDigitalCondition"], [2, 4, 1, "", "setDigitalDelay"], [2, 4, 1, "", "setDigitalExternalCondition"], [2, 4, 1, "", "setDigitalMode"], [2, 4, 1, "", "setDigitalSource"], [2, 4, 1, "", "setDigitalStreamingFlag"], [2, 4, 1, "", "setHwTriggerSettings"], [2, 3, 1, "", "thisown"]], "libm2k.M2kModes": [[2, 4, 1, "", "append"], [2, 4, 1, "", "assign"], [2, 4, 1, "", "back"], [2, 4, 1, "", "begin"], [2, 4, 1, "", "capacity"], [2, 4, 1, "", "clear"], [2, 4, 1, "", "empty"], [2, 4, 1, "", "end"], [2, 4, 1, "", "erase"], [2, 4, 1, "", "front"], [2, 4, 1, "", "get_allocator"], [2, 4, 1, "", "insert"], [2, 4, 1, "", "iterator"], [2, 4, 1, "", "pop"], [2, 4, 1, "", "pop_back"], [2, 4, 1, "", "push_back"], [2, 4, 1, "", "rbegin"], [2, 4, 1, "", "rend"], [2, 4, 1, "", "reserve"], [2, 4, 1, "", "resize"], [2, 4, 1, "", "size"], [2, 4, 1, "", "swap"], [2, 3, 1, "", "thisown"]], "libm2k.M2kPowerSupply": [[2, 4, 1, "", "anyChannelEnabled"], [2, 4, 1, "", "enableAll"], [2, 4, 1, "", "enableChannel"], [2, 4, 1, "", "powerDownDacs"], [2, 4, 1, "", "pushChannel"], [2, 4, 1, "", "readChannel"], [2, 4, 1, "", "reset"], [2, 3, 1, "", "thisown"]], "libm2k.PairDD": [[2, 3, 1, "", "first"], [2, 3, 1, "", "second"], [2, 3, 1, "", "thisown"]], "libm2k.SETTINGS": [[2, 3, 1, "", "analog_condition"], [2, 3, 1, "", "delay"], [2, 3, 1, "", "digital_condition"], [2, 3, 1, "", "hysteresis"], [2, 3, 1, "", "level"], [2, 3, 1, "", "mode"], [2, 3, 1, "", "raw_level"], [2, 3, 1, "", "thisown"], [2, 3, 1, "", "trigger_source"]], "libm2k.SwigPyIterator": [[2, 4, 1, "", "advance"], [2, 4, 1, "", "copy"], [2, 4, 1, "", "decr"], [2, 4, 1, "", "distance"], [2, 4, 1, "", "equal"], [2, 4, 1, "", "incr"], [2, 4, 1, "", "next"], [2, 4, 1, "", "previous"], [2, 3, 1, "", "thisown"], [2, 4, 1, "", "value"]], "libm2k.VectorCtxInfo": [[2, 4, 1, "", "append"], [2, 4, 1, "", "assign"], [2, 4, 1, "", "back"], [2, 4, 1, "", "begin"], [2, 4, 1, "", "capacity"], [2, 4, 1, "", "clear"], [2, 4, 1, "", "empty"], [2, 4, 1, "", "end"], [2, 4, 1, "", "erase"], [2, 4, 1, "", "front"], [2, 4, 1, "", "get_allocator"], [2, 4, 1, "", "insert"], [2, 4, 1, "", "iterator"], [2, 4, 1, "", "pop"], [2, 4, 1, "", "pop_back"], [2, 4, 1, "", "push_back"], [2, 4, 1, "", "rbegin"], [2, 4, 1, "", "rend"], [2, 4, 1, "", "reserve"], [2, 4, 1, "", "resize"], [2, 4, 1, "", "size"], [2, 4, 1, "", "swap"], [2, 3, 1, "", "thisown"]], "libm2k.VectorD": [[2, 4, 1, "", "append"], [2, 4, 1, "", "assign"], [2, 4, 1, "", "back"], [2, 4, 1, "", "begin"], [2, 4, 1, "", "capacity"], [2, 4, 1, "", "clear"], [2, 4, 1, "", "empty"], [2, 4, 1, "", "end"], [2, 4, 1, "", "erase"], [2, 4, 1, "", "front"], [2, 4, 1, "", "get_allocator"], [2, 4, 1, "", "insert"], [2, 4, 1, "", "iterator"], [2, 4, 1, "", "pop"], [2, 4, 1, "", "pop_back"], [2, 4, 1, "", "push_back"], [2, 4, 1, "", "rbegin"], [2, 4, 1, "", "rend"], [2, 4, 1, "", "reserve"], [2, 4, 1, "", "resize"], [2, 4, 1, "", "size"], [2, 4, 1, "", "swap"], [2, 3, 1, "", "thisown"]], "libm2k.VectorI": [[2, 4, 1, "", "append"], [2, 4, 1, "", "assign"], [2, 4, 1, "", "back"], [2, 4, 1, "", "begin"], [2, 4, 1, "", "capacity"], [2, 4, 1, "", "clear"], [2, 4, 1, "", "empty"], [2, 4, 1, "", "end"], [2, 4, 1, "", "erase"], [2, 4, 1, "", "front"], [2, 4, 1, "", "get_allocator"], [2, 4, 1, "", "insert"], [2, 4, 1, "", "iterator"], [2, 4, 1, "", "pop"], [2, 4, 1, "", "pop_back"], [2, 4, 1, "", "push_back"], [2, 4, 1, "", "rbegin"], [2, 4, 1, "", "rend"], [2, 4, 1, "", "reserve"], [2, 4, 1, "", "resize"], [2, 4, 1, "", "size"], [2, 4, 1, "", "swap"], [2, 3, 1, "", "thisown"]], "libm2k.VectorPairDD": [[2, 4, 1, "", "append"], [2, 4, 1, "", "assign"], [2, 4, 1, "", "back"], [2, 4, 1, "", "begin"], [2, 4, 1, "", "capacity"], [2, 4, 1, "", "clear"], [2, 4, 1, "", "empty"], [2, 4, 1, "", "end"], [2, 4, 1, "", "erase"], [2, 4, 1, "", "front"], [2, 4, 1, "", "get_allocator"], [2, 4, 1, "", "insert"], [2, 4, 1, "", "iterator"], [2, 4, 1, "", "pop"], [2, 4, 1, "", "pop_back"], [2, 4, 1, "", "push_back"], [2, 4, 1, "", "rbegin"], [2, 4, 1, "", "rend"], [2, 4, 1, "", "reserve"], [2, 4, 1, "", "resize"], [2, 4, 1, "", "size"], [2, 4, 1, "", "swap"], [2, 3, 1, "", "thisown"]], "libm2k.VectorS": [[2, 4, 1, "", "append"], [2, 4, 1, "", "assign"], [2, 4, 1, "", "back"], [2, 4, 1, "", "begin"], [2, 4, 1, "", "capacity"], [2, 4, 1, "", "clear"], [2, 4, 1, "", "empty"], [2, 4, 1, "", "end"], [2, 4, 1, "", "erase"], [2, 4, 1, "", "front"], [2, 4, 1, "", "get_allocator"], [2, 4, 1, "", "insert"], [2, 4, 1, "", "iterator"], [2, 4, 1, "", "pop"], [2, 4, 1, "", "pop_back"], [2, 4, 1, "", "push_back"], [2, 4, 1, "", "rbegin"], [2, 4, 1, "", "rend"], [2, 4, 1, "", "reserve"], [2, 4, 1, "", "resize"], [2, 4, 1, "", "size"], [2, 4, 1, "", "swap"], [2, 3, 1, "", "thisown"]], "libm2k.VectorStr": [[2, 4, 1, "", "append"], [2, 4, 1, "", "assign"], [2, 4, 1, "", "back"], [2, 4, 1, "", "begin"], [2, 4, 1, "", "capacity"], [2, 4, 1, "", "clear"], [2, 4, 1, "", "empty"], [2, 4, 1, "", "end"], [2, 4, 1, "", "erase"], [2, 4, 1, "", "front"], [2, 4, 1, "", "get_allocator"], [2, 4, 1, "", "insert"], [2, 4, 1, "", "iterator"], [2, 4, 1, "", "pop"], [2, 4, 1, "", "pop_back"], [2, 4, 1, "", "push_back"], [2, 4, 1, "", "rbegin"], [2, 4, 1, "", "rend"], [2, 4, 1, "", "reserve"], [2, 4, 1, "", "resize"], [2, 4, 1, "", "size"], [2, 4, 1, "", "swap"], [2, 3, 1, "", "thisown"]], "libm2k.VectorUS": [[2, 4, 1, "", "append"], [2, 4, 1, "", "assign"], [2, 4, 1, "", "back"], [2, 4, 1, "", "begin"], [2, 4, 1, "", "capacity"], [2, 4, 1, "", "clear"], [2, 4, 1, "", "empty"], [2, 4, 1, "", "end"], [2, 4, 1, "", "erase"], [2, 4, 1, "", "front"], [2, 4, 1, "", "get_allocator"], [2, 4, 1, "", "insert"], [2, 4, 1, "", "iterator"], [2, 4, 1, "", "pop"], [2, 4, 1, "", "pop_back"], [2, 4, 1, "", "push_back"], [2, 4, 1, "", "rbegin"], [2, 4, 1, "", "rend"], [2, 4, 1, "", "reserve"], [2, 4, 1, "", "resize"], [2, 4, 1, "", "size"], [2, 4, 1, "", "swap"], [2, 3, 1, "", "thisown"]], "libm2k.VectorVectorD": [[2, 4, 1, "", "append"], [2, 4, 1, "", "assign"], [2, 4, 1, "", "back"], [2, 4, 1, "", "begin"], [2, 4, 1, "", "capacity"], [2, 4, 1, "", "clear"], [2, 4, 1, "", "empty"], [2, 4, 1, "", "end"], [2, 4, 1, "", "erase"], [2, 4, 1, "", "front"], [2, 4, 1, "", "get_allocator"], [2, 4, 1, "", "insert"], [2, 4, 1, "", "iterator"], [2, 4, 1, "", "pop"], [2, 4, 1, "", "pop_back"], [2, 4, 1, "", "push_back"], [2, 4, 1, "", "rbegin"], [2, 4, 1, "", "rend"], [2, 4, 1, "", "reserve"], [2, 4, 1, "", "resize"], [2, 4, 1, "", "size"], [2, 4, 1, "", "swap"], [2, 3, 1, "", "thisown"]], "libm2k.VectorVectorI": [[2, 4, 1, "", "append"], [2, 4, 1, "", "assign"], [2, 4, 1, "", "back"], [2, 4, 1, "", "begin"], [2, 4, 1, "", "capacity"], [2, 4, 1, "", "clear"], [2, 4, 1, "", "empty"], [2, 4, 1, "", "end"], [2, 4, 1, "", "erase"], [2, 4, 1, "", "front"], [2, 4, 1, "", "get_allocator"], [2, 4, 1, "", "insert"], [2, 4, 1, "", "iterator"], [2, 4, 1, "", "pop"], [2, 4, 1, "", "pop_back"], [2, 4, 1, "", "push_back"], [2, 4, 1, "", "rbegin"], [2, 4, 1, "", "rend"], [2, 4, 1, "", "reserve"], [2, 4, 1, "", "resize"], [2, 4, 1, "", "size"], [2, 4, 1, "", "swap"], [2, 3, 1, "", "thisown"]], "libm2k.VectorVectorS": [[2, 4, 1, "", "append"], [2, 4, 1, "", "assign"], [2, 4, 1, "", "back"], [2, 4, 1, "", "begin"], [2, 4, 1, "", "capacity"], [2, 4, 1, "", "clear"], [2, 4, 1, "", "empty"], [2, 4, 1, "", "end"], [2, 4, 1, "", "erase"], [2, 4, 1, "", "front"], [2, 4, 1, "", "get_allocator"], [2, 4, 1, "", "insert"], [2, 4, 1, "", "iterator"], [2, 4, 1, "", "pop"], [2, 4, 1, "", "pop_back"], [2, 4, 1, "", "push_back"], [2, 4, 1, "", "rbegin"], [2, 4, 1, "", "rend"], [2, 4, 1, "", "reserve"], [2, 4, 1, "", "resize"], [2, 4, 1, "", "size"], [2, 4, 1, "", "swap"], [2, 3, 1, "", "thisown"]], "libm2k.VectorVectorUS": [[2, 4, 1, "", "append"], [2, 4, 1, "", "assign"], [2, 4, 1, "", "back"], [2, 4, 1, "", "begin"], [2, 4, 1, "", "capacity"], [2, 4, 1, "", "clear"], [2, 4, 1, "", "empty"], [2, 4, 1, "", "end"], [2, 4, 1, "", "erase"], [2, 4, 1, "", "front"], [2, 4, 1, "", "get_allocator"], [2, 4, 1, "", "insert"], [2, 4, 1, "", "iterator"], [2, 4, 1, "", "pop"], [2, 4, 1, "", "pop_back"], [2, 4, 1, "", "push_back"], [2, 4, 1, "", "rbegin"], [2, 4, 1, "", "rend"], [2, 4, 1, "", "reserve"], [2, 4, 1, "", "resize"], [2, 4, 1, "", "size"], [2, 4, 1, "", "swap"], [2, 3, 1, "", "thisown"]], "libm2k.channel": [[2, 3, 1, "", "m_channel"], [2, 3, 1, "", "m_direction"], [2, 3, 1, "", "thisown"]], "libm2k.ini_device_struct": [[2, 3, 1, "", "hw_name"], [2, 3, 1, "", "key_val_pairs"], [2, 3, 1, "", "thisown"]], "libm2k.m2k_exception": [[2, 4, 1, "", "file"], [2, 4, 1, "", "iioCode"], [2, 4, 1, "", "line"], [2, 4, 1, "", "make"], [2, 3, 1, "", "thisown"], [2, 4, 1, "", "type"], [2, 4, 1, "", "what"]], "libm2k.m2k_exception_builder": [[2, 4, 1, "", "build"], [2, 4, 1, "", "file"], [2, 4, 1, "", "iioCode"], [2, 4, 1, "", "line"], [2, 3, 1, "", "thisown"], [2, 4, 1, "", "type"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:class", "3": "py:property", "4": "py:method", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "data", "Python data"], "2": ["py", "class", "Python class"], "3": ["py", "property", "Python property"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"]}, "titleterms": {"libm2k": [0, 1, 2], "exampl": 0, "document": 1, "librari": 1, "interfac": 1, "adalm2000": 1, "indic": 1, "tabl": 1, "modul": 2}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 58}, "alltitles": {"libm2k Examples": [[0, "libm2k-examples"]], "libm2k documentation - Library for interfacing with the ADALM2000": [[1, "libm2k-documentation-library-for-interfacing-with-the-adalm2000"]], "Indices and tables": [[1, "indices-and-tables"]], "libm2k Module": [[2, "module-libm2k"]]}, "indexentries": {"always (in module libm2k)": [[2, "libm2k.ALWAYS"]], "analog (in module libm2k)": [[2, "libm2k.ANALOG"]], "calibration_parameters (class in libm2k)": [[2, "libm2k.CALIBRATION_PARAMETERS"]], "channel_1 (in module libm2k)": [[2, "libm2k.CHANNEL_1"]], "channel_2 (in module libm2k)": [[2, "libm2k.CHANNEL_2"]], "context_info (class in libm2k)": [[2, "libm2k.CONTEXT_INFO"]], "context (class in libm2k)": [[2, "libm2k.Context"]], "contextbuilder (class in libm2k)": [[2, "libm2k.ContextBuilder"]], "contextbuilder_contextclose() (in module libm2k)": [[2, "libm2k.ContextBuilder_contextClose"]], "contextbuilder_contextcloseall() (in module libm2k)": [[2, "libm2k.ContextBuilder_contextCloseAll"]], "contextbuilder_contextopen() (in module libm2k)": [[2, "libm2k.ContextBuilder_contextOpen"]], "contextbuilder_enablelogging() (in module libm2k)": [[2, "libm2k.ContextBuilder_enableLogging"]], "contextbuilder_getallcontexts() (in module libm2k)": [[2, "libm2k.ContextBuilder_getAllContexts"]], "contextbuilder_getcontextsinfo() (in module libm2k)": [[2, "libm2k.ContextBuilder_getContextsInfo"]], "contextbuilder_getversion() (in module libm2k)": [[2, "libm2k.ContextBuilder_getVersion"]], "contextbuilder_m2kopen() (in module libm2k)": [[2, "libm2k.ContextBuilder_m2kOpen"]], "dmm (class in libm2k)": [[2, "libm2k.DMM"]], "dmmreading (class in libm2k)": [[2, "libm2k.DMMReading"]], "dmm_reading (class in libm2k)": [[2, "libm2k.DMM_READING"]], "dmms (class in libm2k)": [[2, "libm2k.DMMs"]], "external (in module libm2k)": [[2, "libm2k.EXTERNAL"]], "fmcomms (class in libm2k)": [[2, "libm2k.FMCOMMS"]], "generic (class in libm2k)": [[2, "libm2k.Generic"]], "genericanalogin (class in libm2k)": [[2, "libm2k.GenericAnalogIn"]], "genericanalogout (class in libm2k)": [[2, "libm2k.GenericAnalogOut"]], "iio_context_version (class in libm2k)": [[2, "libm2k.IIO_CONTEXT_VERSION"]], "iio_objects (class in libm2k)": [[2, "libm2k.IIO_OBJECTS"]], "iiobuffers (class in libm2k)": [[2, "libm2k.IioBuffers"]], "iiochannels (class in libm2k)": [[2, "libm2k.IioChannels"]], "iiodevices (class in libm2k)": [[2, "libm2k.IioDevices"]], "m2k (class in libm2k)": [[2, "libm2k.M2k"]], "m2kanalogin (class in libm2k)": [[2, "libm2k.M2kAnalogIn"]], "m2kanalogins (class in libm2k)": [[2, "libm2k.M2kAnalogIns"]], "m2kanalogout (class in libm2k)": [[2, "libm2k.M2kAnalogOut"]], "m2kanalogouts (class in libm2k)": [[2, "libm2k.M2kAnalogOuts"]], "m2kcalibration (class in libm2k)": [[2, "libm2k.M2kCalibration"]], "m2kconditionanalog (class in libm2k)": [[2, "libm2k.M2kConditionAnalog"]], "m2kconditiondigital (class in libm2k)": [[2, "libm2k.M2kConditionDigital"]], "m2kdigital (class in libm2k)": [[2, "libm2k.M2kDigital"]], "m2khardwaretrigger (class in libm2k)": [[2, "libm2k.M2kHardwareTrigger"]], "m2kmodes (class in libm2k)": [[2, "libm2k.M2kModes"]], "m2kpowersupply (class in libm2k)": [[2, "libm2k.M2kPowerSupply"]], "no_source (in module libm2k)": [[2, "libm2k.NO_SOURCE"]], "pairdd (class in libm2k)": [[2, "libm2k.PairDD"]], "select_analog_in (in module libm2k)": [[2, "libm2k.SELECT_ANALOG_IN"]], "select_digital_in (in module libm2k)": [[2, "libm2k.SELECT_DIGITAL_IN"]], "select_none (in module libm2k)": [[2, "libm2k.SELECT_NONE"]], "select_trigger_in (in module libm2k)": [[2, "libm2k.SELECT_TRIGGER_IN"]], "settings (class in libm2k)": [[2, "libm2k.SETTINGS"]], "src_analog_in (in module libm2k)": [[2, "libm2k.SRC_ANALOG_IN"]], "src_digital_in (in module libm2k)": [[2, "libm2k.SRC_DIGITAL_IN"]], "src_disabled (in module libm2k)": [[2, "libm2k.SRC_DISABLED"]], "src_none (in module libm2k)": [[2, "libm2k.SRC_NONE"]], "src_trigger_in (in module libm2k)": [[2, "libm2k.SRC_TRIGGER_IN"]], "swigpyiterator (class in libm2k)": [[2, "libm2k.SwigPyIterator"]], "vectorctxinfo (class in libm2k)": [[2, "libm2k.VectorCtxInfo"]], "vectord (class in libm2k)": [[2, "libm2k.VectorD"]], "vectori (class in libm2k)": [[2, "libm2k.VectorI"]], "vectorpairdd (class in libm2k)": [[2, "libm2k.VectorPairDD"]], "vectors (class in libm2k)": [[2, "libm2k.VectorS"]], "vectorstr (class in libm2k)": [[2, "libm2k.VectorStr"]], "vectorus (class in libm2k)": [[2, "libm2k.VectorUS"]], "vectorvectord (class in libm2k)": [[2, "libm2k.VectorVectorD"]], "vectorvectori (class in libm2k)": [[2, "libm2k.VectorVectorI"]], "vectorvectors (class in libm2k)": [[2, "libm2k.VectorVectorS"]], "vectorvectorus (class in libm2k)": [[2, "libm2k.VectorVectorUS"]], "adc_gain_ch_1 (libm2k.calibration_parameters property)": [[2, "libm2k.CALIBRATION_PARAMETERS.adc_gain_ch_1"]], "adc_gain_ch_2 (libm2k.calibration_parameters property)": [[2, "libm2k.CALIBRATION_PARAMETERS.adc_gain_ch_2"]], "adc_offset_ch_1 (libm2k.calibration_parameters property)": [[2, "libm2k.CALIBRATION_PARAMETERS.adc_offset_ch_1"]], "adc_offset_ch_2 (libm2k.calibration_parameters property)": [[2, "libm2k.CALIBRATION_PARAMETERS.adc_offset_ch_2"]], "advance() (libm2k.swigpyiterator method)": [[2, "libm2k.SwigPyIterator.advance"]], "analog_condition (libm2k.settings property)": [[2, "libm2k.SETTINGS.analog_condition"]], "anychannelenabled() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.anyChannelEnabled"]], "anychannelenabled() (libm2k.m2kpowersupply method)": [[2, "libm2k.M2kPowerSupply.anyChannelEnabled"]], "append() (libm2k.dmmreading method)": [[2, "libm2k.DMMReading.append"]], "append() (libm2k.dmms method)": [[2, "libm2k.DMMs.append"]], "append() (libm2k.iiobuffers method)": [[2, "libm2k.IioBuffers.append"]], "append() (libm2k.iiochannels method)": [[2, "libm2k.IioChannels.append"]], "append() (libm2k.iiodevices method)": [[2, "libm2k.IioDevices.append"]], "append() (libm2k.m2kanalogins method)": [[2, "libm2k.M2kAnalogIns.append"]], "append() (libm2k.m2kanalogouts method)": [[2, "libm2k.M2kAnalogOuts.append"]], "append() (libm2k.m2kconditionanalog method)": [[2, "libm2k.M2kConditionAnalog.append"]], "append() (libm2k.m2kconditiondigital method)": [[2, "libm2k.M2kConditionDigital.append"]], "append() (libm2k.m2kmodes method)": [[2, "libm2k.M2kModes.append"]], "append() (libm2k.vectorctxinfo method)": [[2, "libm2k.VectorCtxInfo.append"]], "append() (libm2k.vectord method)": [[2, "libm2k.VectorD.append"]], "append() (libm2k.vectori method)": [[2, "libm2k.VectorI.append"]], "append() (libm2k.vectorpairdd method)": [[2, "libm2k.VectorPairDD.append"]], "append() (libm2k.vectors method)": [[2, "libm2k.VectorS.append"]], "append() (libm2k.vectorstr method)": [[2, "libm2k.VectorStr.append"]], "append() (libm2k.vectorus method)": [[2, "libm2k.VectorUS.append"]], "append() (libm2k.vectorvectord method)": [[2, "libm2k.VectorVectorD.append"]], "append() (libm2k.vectorvectori method)": [[2, "libm2k.VectorVectorI.append"]], "append() (libm2k.vectorvectors method)": [[2, "libm2k.VectorVectorS.append"]], "append() (libm2k.vectorvectorus method)": [[2, "libm2k.VectorVectorUS.append"]], "assign() (libm2k.dmmreading method)": [[2, "libm2k.DMMReading.assign"]], "assign() (libm2k.dmms method)": [[2, "libm2k.DMMs.assign"]], "assign() (libm2k.iiobuffers method)": [[2, "libm2k.IioBuffers.assign"]], "assign() (libm2k.iiochannels method)": [[2, "libm2k.IioChannels.assign"]], "assign() (libm2k.iiodevices method)": [[2, "libm2k.IioDevices.assign"]], "assign() (libm2k.m2kanalogins method)": [[2, "libm2k.M2kAnalogIns.assign"]], "assign() (libm2k.m2kanalogouts method)": [[2, "libm2k.M2kAnalogOuts.assign"]], "assign() (libm2k.m2kconditionanalog method)": [[2, "libm2k.M2kConditionAnalog.assign"]], "assign() (libm2k.m2kconditiondigital method)": [[2, "libm2k.M2kConditionDigital.assign"]], "assign() (libm2k.m2kmodes method)": [[2, "libm2k.M2kModes.assign"]], "assign() (libm2k.vectorctxinfo method)": [[2, "libm2k.VectorCtxInfo.assign"]], "assign() (libm2k.vectord method)": [[2, "libm2k.VectorD.assign"]], "assign() (libm2k.vectori method)": [[2, "libm2k.VectorI.assign"]], "assign() (libm2k.vectorpairdd method)": [[2, "libm2k.VectorPairDD.assign"]], "assign() (libm2k.vectors method)": [[2, "libm2k.VectorS.assign"]], "assign() (libm2k.vectorstr method)": [[2, "libm2k.VectorStr.assign"]], "assign() (libm2k.vectorus method)": [[2, "libm2k.VectorUS.assign"]], "assign() (libm2k.vectorvectord method)": [[2, "libm2k.VectorVectorD.assign"]], "assign() (libm2k.vectorvectori method)": [[2, "libm2k.VectorVectorI.assign"]], "assign() (libm2k.vectorvectors method)": [[2, "libm2k.VectorVectorS.assign"]], "assign() (libm2k.vectorvectorus method)": [[2, "libm2k.VectorVectorUS.assign"]], "back() (libm2k.dmmreading method)": [[2, "libm2k.DMMReading.back"]], "back() (libm2k.dmms method)": [[2, "libm2k.DMMs.back"]], "back() (libm2k.iiobuffers method)": [[2, "libm2k.IioBuffers.back"]], "back() (libm2k.iiochannels method)": [[2, "libm2k.IioChannels.back"]], "back() (libm2k.iiodevices method)": [[2, "libm2k.IioDevices.back"]], "back() (libm2k.m2kanalogins method)": [[2, "libm2k.M2kAnalogIns.back"]], "back() (libm2k.m2kanalogouts method)": [[2, "libm2k.M2kAnalogOuts.back"]], "back() (libm2k.m2kconditionanalog method)": [[2, "libm2k.M2kConditionAnalog.back"]], "back() (libm2k.m2kconditiondigital method)": [[2, "libm2k.M2kConditionDigital.back"]], "back() (libm2k.m2kmodes method)": [[2, "libm2k.M2kModes.back"]], "back() (libm2k.vectorctxinfo method)": [[2, "libm2k.VectorCtxInfo.back"]], "back() (libm2k.vectord method)": [[2, "libm2k.VectorD.back"]], "back() (libm2k.vectori method)": [[2, "libm2k.VectorI.back"]], "back() (libm2k.vectorpairdd method)": [[2, "libm2k.VectorPairDD.back"]], "back() (libm2k.vectors method)": [[2, "libm2k.VectorS.back"]], "back() (libm2k.vectorstr method)": [[2, "libm2k.VectorStr.back"]], "back() (libm2k.vectorus method)": [[2, "libm2k.VectorUS.back"]], "back() (libm2k.vectorvectord method)": [[2, "libm2k.VectorVectorD.back"]], "back() (libm2k.vectorvectori method)": [[2, "libm2k.VectorVectorI.back"]], "back() (libm2k.vectorvectors method)": [[2, "libm2k.VectorVectorS.back"]], "back() (libm2k.vectorvectorus method)": [[2, "libm2k.VectorVectorUS.back"]], "begin() (libm2k.dmmreading method)": [[2, "libm2k.DMMReading.begin"]], "begin() (libm2k.dmms method)": [[2, "libm2k.DMMs.begin"]], "begin() (libm2k.iiobuffers method)": [[2, "libm2k.IioBuffers.begin"]], "begin() (libm2k.iiochannels method)": [[2, "libm2k.IioChannels.begin"]], "begin() (libm2k.iiodevices method)": [[2, "libm2k.IioDevices.begin"]], "begin() (libm2k.m2kanalogins method)": [[2, "libm2k.M2kAnalogIns.begin"]], "begin() (libm2k.m2kanalogouts method)": [[2, "libm2k.M2kAnalogOuts.begin"]], "begin() (libm2k.m2kconditionanalog method)": [[2, "libm2k.M2kConditionAnalog.begin"]], "begin() (libm2k.m2kconditiondigital method)": [[2, "libm2k.M2kConditionDigital.begin"]], "begin() (libm2k.m2kmodes method)": [[2, "libm2k.M2kModes.begin"]], "begin() (libm2k.vectorctxinfo method)": [[2, "libm2k.VectorCtxInfo.begin"]], "begin() (libm2k.vectord method)": [[2, "libm2k.VectorD.begin"]], "begin() (libm2k.vectori method)": [[2, "libm2k.VectorI.begin"]], "begin() (libm2k.vectorpairdd method)": [[2, "libm2k.VectorPairDD.begin"]], "begin() (libm2k.vectors method)": [[2, "libm2k.VectorS.begin"]], "begin() (libm2k.vectorstr method)": [[2, "libm2k.VectorStr.begin"]], "begin() (libm2k.vectorus method)": [[2, "libm2k.VectorUS.begin"]], "begin() (libm2k.vectorvectord method)": [[2, "libm2k.VectorVectorD.begin"]], "begin() (libm2k.vectorvectori method)": [[2, "libm2k.VectorVectorI.begin"]], "begin() (libm2k.vectorvectors method)": [[2, "libm2k.VectorVectorS.begin"]], "begin() (libm2k.vectorvectorus method)": [[2, "libm2k.VectorVectorUS.begin"]], "buffers_rx (libm2k.iio_objects property)": [[2, "libm2k.IIO_OBJECTS.buffers_rx"]], "buffers_tx (libm2k.iio_objects property)": [[2, "libm2k.IIO_OBJECTS.buffers_tx"]], "build() (libm2k.m2k_exception_builder method)": [[2, "libm2k.m2k_exception_builder.build"]], "calibrate() (libm2k.m2k method)": [[2, "libm2k.M2k.calibrate"]], "calibrateadc() (libm2k.m2k method)": [[2, "libm2k.M2k.calibrateADC"]], "calibrateadc() (libm2k.m2kcalibration method)": [[2, "libm2k.M2kCalibration.calibrateADC"]], "calibrateall() (libm2k.m2kcalibration method)": [[2, "libm2k.M2kCalibration.calibrateAll"]], "calibratedac() (libm2k.m2k method)": [[2, "libm2k.M2k.calibrateDAC"]], "calibratedac() (libm2k.m2kcalibration method)": [[2, "libm2k.M2kCalibration.calibrateDAC"]], "calibratefromcontext() (libm2k.m2k method)": [[2, "libm2k.M2k.calibrateFromContext"]], "cancelacquisition() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.cancelAcquisition"]], "cancelacquisition() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.cancelAcquisition"]], "cancelbuffer() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.cancelBuffer"]], "cancelbufferout() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.cancelBufferOut"]], "cancelcalibration() (libm2k.m2kcalibration method)": [[2, "libm2k.M2kCalibration.cancelCalibration"]], "capacity() (libm2k.dmmreading method)": [[2, "libm2k.DMMReading.capacity"]], "capacity() (libm2k.dmms method)": [[2, "libm2k.DMMs.capacity"]], "capacity() (libm2k.iiobuffers method)": [[2, "libm2k.IioBuffers.capacity"]], "capacity() (libm2k.iiochannels method)": [[2, "libm2k.IioChannels.capacity"]], "capacity() (libm2k.iiodevices method)": [[2, "libm2k.IioDevices.capacity"]], "capacity() (libm2k.m2kanalogins method)": [[2, "libm2k.M2kAnalogIns.capacity"]], "capacity() (libm2k.m2kanalogouts method)": [[2, "libm2k.M2kAnalogOuts.capacity"]], "capacity() (libm2k.m2kconditionanalog method)": [[2, "libm2k.M2kConditionAnalog.capacity"]], "capacity() (libm2k.m2kconditiondigital method)": [[2, "libm2k.M2kConditionDigital.capacity"]], "capacity() (libm2k.m2kmodes method)": [[2, "libm2k.M2kModes.capacity"]], "capacity() (libm2k.vectorctxinfo method)": [[2, "libm2k.VectorCtxInfo.capacity"]], "capacity() (libm2k.vectord method)": [[2, "libm2k.VectorD.capacity"]], "capacity() (libm2k.vectori method)": [[2, "libm2k.VectorI.capacity"]], "capacity() (libm2k.vectorpairdd method)": [[2, "libm2k.VectorPairDD.capacity"]], "capacity() (libm2k.vectors method)": [[2, "libm2k.VectorS.capacity"]], "capacity() (libm2k.vectorstr method)": [[2, "libm2k.VectorStr.capacity"]], "capacity() (libm2k.vectorus method)": [[2, "libm2k.VectorUS.capacity"]], "capacity() (libm2k.vectorvectord method)": [[2, "libm2k.VectorVectorD.capacity"]], "capacity() (libm2k.vectorvectori method)": [[2, "libm2k.VectorVectorI.capacity"]], "capacity() (libm2k.vectorvectors method)": [[2, "libm2k.VectorVectorS.capacity"]], "capacity() (libm2k.vectorvectorus method)": [[2, "libm2k.VectorVectorUS.capacity"]], "channel (class in libm2k)": [[2, "libm2k.channel"]], "channels_in (libm2k.iio_objects property)": [[2, "libm2k.IIO_OBJECTS.channels_in"]], "channels_out (libm2k.iio_objects property)": [[2, "libm2k.IIO_OBJECTS.channels_out"]], "clear() (libm2k.dmmreading method)": [[2, "libm2k.DMMReading.clear"]], "clear() (libm2k.dmms method)": [[2, "libm2k.DMMs.clear"]], "clear() (libm2k.iiobuffers method)": [[2, "libm2k.IioBuffers.clear"]], "clear() (libm2k.iiochannels method)": [[2, "libm2k.IioChannels.clear"]], "clear() (libm2k.iiodevices method)": [[2, "libm2k.IioDevices.clear"]], "clear() (libm2k.m2kanalogins method)": [[2, "libm2k.M2kAnalogIns.clear"]], "clear() (libm2k.m2kanalogouts method)": [[2, "libm2k.M2kAnalogOuts.clear"]], "clear() (libm2k.m2kconditionanalog method)": [[2, "libm2k.M2kConditionAnalog.clear"]], "clear() (libm2k.m2kconditiondigital method)": [[2, "libm2k.M2kConditionDigital.clear"]], "clear() (libm2k.m2kmodes method)": [[2, "libm2k.M2kModes.clear"]], "clear() (libm2k.vectorctxinfo method)": [[2, "libm2k.VectorCtxInfo.clear"]], "clear() (libm2k.vectord method)": [[2, "libm2k.VectorD.clear"]], "clear() (libm2k.vectori method)": [[2, "libm2k.VectorI.clear"]], "clear() (libm2k.vectorpairdd method)": [[2, "libm2k.VectorPairDD.clear"]], "clear() (libm2k.vectors method)": [[2, "libm2k.VectorS.clear"]], "clear() (libm2k.vectorstr method)": [[2, "libm2k.VectorStr.clear"]], "clear() (libm2k.vectorus method)": [[2, "libm2k.VectorUS.clear"]], "clear() (libm2k.vectorvectord method)": [[2, "libm2k.VectorVectorD.clear"]], "clear() (libm2k.vectorvectori method)": [[2, "libm2k.VectorVectorI.clear"]], "clear() (libm2k.vectorvectors method)": [[2, "libm2k.VectorVectorS.clear"]], "clear() (libm2k.vectorvectorus method)": [[2, "libm2k.VectorVectorUS.clear"]], "context (libm2k.iio_objects property)": [[2, "libm2k.IIO_OBJECTS.context"]], "contextclose() (in module libm2k)": [[2, "libm2k.contextClose"]], "contextclose() (libm2k.contextbuilder static method)": [[2, "libm2k.ContextBuilder.contextClose"]], "contextcloseall() (in module libm2k)": [[2, "libm2k.contextCloseAll"]], "contextcloseall() (libm2k.contextbuilder static method)": [[2, "libm2k.ContextBuilder.contextCloseAll"]], "contextopen() (in module libm2k)": [[2, "libm2k.contextOpen"]], "contextopen() (libm2k.contextbuilder static method)": [[2, "libm2k.ContextBuilder.contextOpen"]], "convertrawtovolts() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.convertRawToVolts"]], "convertrawtovolts() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.convertRawToVolts"]], "convertvoltstoraw() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.convertVoltsToRaw"]], "convertvoltstoraw() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.convertVoltsToRaw"]], "copy() (libm2k.swigpyiterator method)": [[2, "libm2k.SwigPyIterator.copy"]], "dac_a_gain (libm2k.calibration_parameters property)": [[2, "libm2k.CALIBRATION_PARAMETERS.dac_a_gain"]], "dac_a_offset (libm2k.calibration_parameters property)": [[2, "libm2k.CALIBRATION_PARAMETERS.dac_a_offset"]], "dac_b_gain (libm2k.calibration_parameters property)": [[2, "libm2k.CALIBRATION_PARAMETERS.dac_b_gain"]], "dac_b_offset (libm2k.calibration_parameters property)": [[2, "libm2k.CALIBRATION_PARAMETERS.dac_b_offset"]], "decr() (libm2k.swigpyiterator method)": [[2, "libm2k.SwigPyIterator.decr"]], "deinitialize() (libm2k.context method)": [[2, "libm2k.Context.deinitialize"]], "deinitialize() (libm2k.m2k method)": [[2, "libm2k.M2k.deinitialize"]], "delay (libm2k.settings property)": [[2, "libm2k.SETTINGS.delay"]], "devices (libm2k.iio_objects property)": [[2, "libm2k.IIO_OBJECTS.devices"]], "digital_condition (libm2k.settings property)": [[2, "libm2k.SETTINGS.digital_condition"]], "distance() (libm2k.swigpyiterator method)": [[2, "libm2k.SwigPyIterator.distance"]], "empty() (libm2k.dmmreading method)": [[2, "libm2k.DMMReading.empty"]], "empty() (libm2k.dmms method)": [[2, "libm2k.DMMs.empty"]], "empty() (libm2k.iiobuffers method)": [[2, "libm2k.IioBuffers.empty"]], "empty() (libm2k.iiochannels method)": [[2, "libm2k.IioChannels.empty"]], "empty() (libm2k.iiodevices method)": [[2, "libm2k.IioDevices.empty"]], "empty() (libm2k.m2kanalogins method)": [[2, "libm2k.M2kAnalogIns.empty"]], "empty() (libm2k.m2kanalogouts method)": [[2, "libm2k.M2kAnalogOuts.empty"]], "empty() (libm2k.m2kconditionanalog method)": [[2, "libm2k.M2kConditionAnalog.empty"]], "empty() (libm2k.m2kconditiondigital method)": [[2, "libm2k.M2kConditionDigital.empty"]], "empty() (libm2k.m2kmodes method)": [[2, "libm2k.M2kModes.empty"]], "empty() (libm2k.vectorctxinfo method)": [[2, "libm2k.VectorCtxInfo.empty"]], "empty() (libm2k.vectord method)": [[2, "libm2k.VectorD.empty"]], "empty() (libm2k.vectori method)": [[2, "libm2k.VectorI.empty"]], "empty() (libm2k.vectorpairdd method)": [[2, "libm2k.VectorPairDD.empty"]], "empty() (libm2k.vectors method)": [[2, "libm2k.VectorS.empty"]], "empty() (libm2k.vectorstr method)": [[2, "libm2k.VectorStr.empty"]], "empty() (libm2k.vectorus method)": [[2, "libm2k.VectorUS.empty"]], "empty() (libm2k.vectorvectord method)": [[2, "libm2k.VectorVectorD.empty"]], "empty() (libm2k.vectorvectori method)": [[2, "libm2k.VectorVectorI.empty"]], "empty() (libm2k.vectorvectors method)": [[2, "libm2k.VectorVectorS.empty"]], "empty() (libm2k.vectorvectorus method)": [[2, "libm2k.VectorVectorUS.empty"]], "enableall() (libm2k.m2kpowersupply method)": [[2, "libm2k.M2kPowerSupply.enableAll"]], "enableallout() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.enableAllOut"]], "enablechannel() (libm2k.genericanalogin method)": [[2, "libm2k.GenericAnalogIn.enableChannel"]], "enablechannel() (libm2k.genericanalogout method)": [[2, "libm2k.GenericAnalogOut.enableChannel"]], "enablechannel() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.enableChannel"]], "enablechannel() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.enableChannel"]], "enablechannel() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.enableChannel"]], "enablechannel() (libm2k.m2kpowersupply method)": [[2, "libm2k.M2kPowerSupply.enableChannel"]], "enablelogging() (in module libm2k)": [[2, "libm2k.enableLogging"]], "enablelogging() (libm2k.contextbuilder static method)": [[2, "libm2k.ContextBuilder.enableLogging"]], "end() (libm2k.dmmreading method)": [[2, "libm2k.DMMReading.end"]], "end() (libm2k.dmms method)": [[2, "libm2k.DMMs.end"]], "end() (libm2k.iiobuffers method)": [[2, "libm2k.IioBuffers.end"]], "end() (libm2k.iiochannels method)": [[2, "libm2k.IioChannels.end"]], "end() (libm2k.iiodevices method)": [[2, "libm2k.IioDevices.end"]], "end() (libm2k.m2kanalogins method)": [[2, "libm2k.M2kAnalogIns.end"]], "end() (libm2k.m2kanalogouts method)": [[2, "libm2k.M2kAnalogOuts.end"]], "end() (libm2k.m2kconditionanalog method)": [[2, "libm2k.M2kConditionAnalog.end"]], "end() (libm2k.m2kconditiondigital method)": [[2, "libm2k.M2kConditionDigital.end"]], "end() (libm2k.m2kmodes method)": [[2, "libm2k.M2kModes.end"]], "end() (libm2k.vectorctxinfo method)": [[2, "libm2k.VectorCtxInfo.end"]], "end() (libm2k.vectord method)": [[2, "libm2k.VectorD.end"]], "end() (libm2k.vectori method)": [[2, "libm2k.VectorI.end"]], "end() (libm2k.vectorpairdd method)": [[2, "libm2k.VectorPairDD.end"]], "end() (libm2k.vectors method)": [[2, "libm2k.VectorS.end"]], "end() (libm2k.vectorstr method)": [[2, "libm2k.VectorStr.end"]], "end() (libm2k.vectorus method)": [[2, "libm2k.VectorUS.end"]], "end() (libm2k.vectorvectord method)": [[2, "libm2k.VectorVectorD.end"]], "end() (libm2k.vectorvectori method)": [[2, "libm2k.VectorVectorI.end"]], "end() (libm2k.vectorvectors method)": [[2, "libm2k.VectorVectorS.end"]], "end() (libm2k.vectorvectorus method)": [[2, "libm2k.VectorVectorUS.end"]], "equal() (libm2k.swigpyiterator method)": [[2, "libm2k.SwigPyIterator.equal"]], "erase() (libm2k.dmmreading method)": [[2, "libm2k.DMMReading.erase"]], "erase() (libm2k.dmms method)": [[2, "libm2k.DMMs.erase"]], "erase() (libm2k.iiobuffers method)": [[2, "libm2k.IioBuffers.erase"]], "erase() (libm2k.iiochannels method)": [[2, "libm2k.IioChannels.erase"]], "erase() (libm2k.iiodevices method)": [[2, "libm2k.IioDevices.erase"]], "erase() (libm2k.m2kanalogins method)": [[2, "libm2k.M2kAnalogIns.erase"]], "erase() (libm2k.m2kanalogouts method)": [[2, "libm2k.M2kAnalogOuts.erase"]], "erase() (libm2k.m2kconditionanalog method)": [[2, "libm2k.M2kConditionAnalog.erase"]], "erase() (libm2k.m2kconditiondigital method)": [[2, "libm2k.M2kConditionDigital.erase"]], "erase() (libm2k.m2kmodes method)": [[2, "libm2k.M2kModes.erase"]], "erase() (libm2k.vectorctxinfo method)": [[2, "libm2k.VectorCtxInfo.erase"]], "erase() (libm2k.vectord method)": [[2, "libm2k.VectorD.erase"]], "erase() (libm2k.vectori method)": [[2, "libm2k.VectorI.erase"]], "erase() (libm2k.vectorpairdd method)": [[2, "libm2k.VectorPairDD.erase"]], "erase() (libm2k.vectors method)": [[2, "libm2k.VectorS.erase"]], "erase() (libm2k.vectorstr method)": [[2, "libm2k.VectorStr.erase"]], "erase() (libm2k.vectorus method)": [[2, "libm2k.VectorUS.erase"]], "erase() (libm2k.vectorvectord method)": [[2, "libm2k.VectorVectorD.erase"]], "erase() (libm2k.vectorvectori method)": [[2, "libm2k.VectorVectorI.erase"]], "erase() (libm2k.vectorvectors method)": [[2, "libm2k.VectorVectorS.erase"]], "erase() (libm2k.vectorvectorus method)": [[2, "libm2k.VectorVectorUS.erase"]], "file() (libm2k.m2k_exception method)": [[2, "libm2k.m2k_exception.file"]], "file() (libm2k.m2k_exception_builder method)": [[2, "libm2k.m2k_exception_builder.file"]], "first (libm2k.pairdd property)": [[2, "libm2k.PairDD.first"]], "front() (libm2k.dmmreading method)": [[2, "libm2k.DMMReading.front"]], "front() (libm2k.dmms method)": [[2, "libm2k.DMMs.front"]], "front() (libm2k.iiobuffers method)": [[2, "libm2k.IioBuffers.front"]], "front() (libm2k.iiochannels method)": [[2, "libm2k.IioChannels.front"]], "front() (libm2k.iiodevices method)": [[2, "libm2k.IioDevices.front"]], "front() (libm2k.m2kanalogins method)": [[2, "libm2k.M2kAnalogIns.front"]], "front() (libm2k.m2kanalogouts method)": [[2, "libm2k.M2kAnalogOuts.front"]], "front() (libm2k.m2kconditionanalog method)": [[2, "libm2k.M2kConditionAnalog.front"]], "front() (libm2k.m2kconditiondigital method)": [[2, "libm2k.M2kConditionDigital.front"]], "front() (libm2k.m2kmodes method)": [[2, "libm2k.M2kModes.front"]], "front() (libm2k.vectorctxinfo method)": [[2, "libm2k.VectorCtxInfo.front"]], "front() (libm2k.vectord method)": [[2, "libm2k.VectorD.front"]], "front() (libm2k.vectori method)": [[2, "libm2k.VectorI.front"]], "front() (libm2k.vectorpairdd method)": [[2, "libm2k.VectorPairDD.front"]], "front() (libm2k.vectors method)": [[2, "libm2k.VectorS.front"]], "front() (libm2k.vectorstr method)": [[2, "libm2k.VectorStr.front"]], "front() (libm2k.vectorus method)": [[2, "libm2k.VectorUS.front"]], "front() (libm2k.vectorvectord method)": [[2, "libm2k.VectorVectorD.front"]], "front() (libm2k.vectorvectori method)": [[2, "libm2k.VectorVectorI.front"]], "front() (libm2k.vectorvectors method)": [[2, "libm2k.VectorVectorS.front"]], "front() (libm2k.vectorvectorus method)": [[2, "libm2k.VectorVectorUS.front"]], "getadccalibrated() (libm2k.m2kcalibration method)": [[2, "libm2k.M2kCalibration.getAdcCalibrated"]], "getadccalibrationgain() (libm2k.m2k method)": [[2, "libm2k.M2k.getAdcCalibrationGain"]], "getadccalibrationoffset() (libm2k.m2k method)": [[2, "libm2k.M2k.getAdcCalibrationOffset"]], "getadcgain() (libm2k.m2kcalibration method)": [[2, "libm2k.M2kCalibration.getAdcGain"]], "getadcoffset() (libm2k.m2kcalibration method)": [[2, "libm2k.M2kCalibration.getAdcOffset"]], "getallanalogin() (libm2k.m2k method)": [[2, "libm2k.M2k.getAllAnalogIn"]], "getallanalogout() (libm2k.m2k method)": [[2, "libm2k.M2k.getAllAnalogOut"]], "getallchannels() (libm2k.dmm method)": [[2, "libm2k.DMM.getAllChannels"]], "getallcontexts() (in module libm2k)": [[2, "libm2k.getAllContexts"]], "getallcontexts() (libm2k.contextbuilder static method)": [[2, "libm2k.ContextBuilder.getAllContexts"]], "getalldevices() (libm2k.context method)": [[2, "libm2k.Context.getAllDevices"]], "getalldmm() (libm2k.context method)": [[2, "libm2k.Context.getAllDmm"]], "getanalogcondition() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.getAnalogCondition"]], "getanalogdelay() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.getAnalogDelay"]], "getanalogexternalcondition() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.getAnalogExternalCondition"]], "getanalogexternaloutselect() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.getAnalogExternalOutSelect"]], "getanaloghysteresis() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.getAnalogHysteresis"]], "getanalogin() (libm2k.generic method)": [[2, "libm2k.Generic.getAnalogIn"]], "getanalogin() (libm2k.m2k method)": [[2, "libm2k.M2k.getAnalogIn"]], "getanalogincount() (libm2k.generic method)": [[2, "libm2k.Generic.getAnalogInCount"]], "getanaloglevel() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.getAnalogLevel"]], "getanaloglevelraw() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.getAnalogLevelRaw"]], "getanalogmode() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.getAnalogMode"]], "getanalogout() (libm2k.generic method)": [[2, "libm2k.Generic.getAnalogOut"]], "getanalogout() (libm2k.m2k method)": [[2, "libm2k.M2k.getAnalogOut"]], "getanalogoutcount() (libm2k.generic method)": [[2, "libm2k.Generic.getAnalogOutCount"]], "getanalogouttriggercondition() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.getAnalogOutTriggerCondition"]], "getanalogouttriggersource() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.getAnalogOutTriggerSource"]], "getanalogouttriggerstatus() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.getAnalogOutTriggerStatus"]], "getanalogsource() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.getAnalogSource"]], "getanalogsourcechannel() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.getAnalogSourceChannel"]], "getanalogstreamingflag() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.getAnalogStreamingFlag"]], "getavailablecontextattributes() (libm2k.context method)": [[2, "libm2k.Context.getAvailableContextAttributes"]], "getavailableranges() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getAvailableRanges"]], "getavailablesamplerates() (libm2k.genericanalogin method)": [[2, "libm2k.GenericAnalogIn.getAvailableSampleRates"]], "getavailablesamplerates() (libm2k.genericanalogout method)": [[2, "libm2k.GenericAnalogOut.getAvailableSampleRates"]], "getavailablesamplerates() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getAvailableSampleRates"]], "getavailablesamplerates() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.getAvailableSampleRates"]], "getbufferrearmontrigger() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.getBufferRearmOnTrigger"]], "getchannelname() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getChannelName"]], "getchannelname() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.getChannelName"]], "getcontextattributevalue() (libm2k.context method)": [[2, "libm2k.Context.getContextAttributeValue"]], "getcontextdescription() (libm2k.context method)": [[2, "libm2k.Context.getContextDescription"]], "getcontextsinfo() (in module libm2k)": [[2, "libm2k.getContextsInfo"]], "getcontextsinfo() (libm2k.contextbuilder static method)": [[2, "libm2k.ContextBuilder.getContextsInfo"]], "getcurrenthwsettings() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.getCurrentHwSettings"]], "getcyclic() (libm2k.genericanalogout method)": [[2, "libm2k.GenericAnalogOut.getCyclic"]], "getcyclic() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.getCyclic"]], "getcyclic() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.getCyclic"]], "getdmm() (libm2k.context method)": [[2, "libm2k.Context.getDMM"]], "getdaccalibrated() (libm2k.m2kcalibration method)": [[2, "libm2k.M2kCalibration.getDacCalibrated"]], "getdaccalibrationgain() (libm2k.m2k method)": [[2, "libm2k.M2k.getDacCalibrationGain"]], "getdaccalibrationoffset() (libm2k.m2k method)": [[2, "libm2k.M2k.getDacCalibrationOffset"]], "getdacgain() (libm2k.m2kcalibration method)": [[2, "libm2k.M2kCalibration.getDacGain"]], "getdacoffset() (libm2k.m2kcalibration method)": [[2, "libm2k.M2kCalibration.getDacOffset"]], "getdevicename() (libm2k.genericanalogin method)": [[2, "libm2k.GenericAnalogIn.getDeviceName"]], "getdigital() (libm2k.m2k method)": [[2, "libm2k.M2k.getDigital"]], "getdigitalcondition() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.getDigitalCondition"]], "getdigitaldelay() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.getDigitalDelay"]], "getdigitalexternalcondition() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.getDigitalExternalCondition"]], "getdigitalmode() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.getDigitalMode"]], "getdigitalsource() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.getDigitalSource"]], "getdigitalstreamingflag() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.getDigitalStreamingFlag"]], "getdirection() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.getDirection"]], "getdmmcount() (libm2k.context method)": [[2, "libm2k.Context.getDmmCount"]], "getfiltercompensation() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getFilterCompensation"]], "getfiltercompensation() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.getFilterCompensation"]], "getfirmwareversion() (libm2k.context method)": [[2, "libm2k.Context.getFirmwareVersion"]], "gethysteresisrange() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getHysteresisRange"]], "getiiocontext() (libm2k.context method)": [[2, "libm2k.Context.getIioContext"]], "getiiocontextversion() (libm2k.context method)": [[2, "libm2k.Context.getIioContextVersion"]], "getiioobjects() (libm2k.genericanalogin method)": [[2, "libm2k.GenericAnalogIn.getIioObjects"]], "getiioobjects() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getIioObjects"]], "getiioobjects() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.getIioObjects"]], "getiioobjects() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.getIioObjects"]], "getkernelbufferscount() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getKernelBuffersCount"]], "getkernelbufferscount() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.getKernelBuffersCount"]], "getlut() (libm2k.m2k method)": [[2, "libm2k.M2k.getLUT"]], "getled() (libm2k.m2k method)": [[2, "libm2k.M2k.getLed"]], "getmaximumsamplerate() (libm2k.genericanalogin method)": [[2, "libm2k.GenericAnalogIn.getMaximumSamplerate"]], "getmaximumsamplerate() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getMaximumSamplerate"]], "getmaximumsamplerate() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.getMaximumSamplerate"]], "getname() (libm2k.dmm method)": [[2, "libm2k.DMM.getName"]], "getname() (libm2k.genericanalogout method)": [[2, "libm2k.GenericAnalogOut.getName"]], "getname() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getName"]], "getnbchannels() (libm2k.genericanalogin method)": [[2, "libm2k.GenericAnalogIn.getNbChannels"]], "getnbchannels() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getNbChannels"]], "getnbchannels() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.getNbChannels"]], "getnbchannelsin() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.getNbChannelsIn"]], "getnbchannelsout() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.getNbChannelsOut"]], "getoutputmode() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.getOutputMode"]], "getoversamplingratio() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getOversamplingRatio"]], "getoversamplingratio() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.getOversamplingRatio"]], "getpowersupply() (libm2k.m2k method)": [[2, "libm2k.M2k.getPowerSupply"]], "getrange() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getRange"]], "getrangelimits() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getRangeLimits"]], "getsamplerate() (libm2k.genericanalogin method)": [[2, "libm2k.GenericAnalogIn.getSampleRate"]], "getsamplerate() (libm2k.genericanalogout method)": [[2, "libm2k.GenericAnalogOut.getSampleRate"]], "getsamplerate() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getSampleRate"]], "getsamplerate() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.getSampleRate"]], "getsampleratein() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.getSampleRateIn"]], "getsamplerateout() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.getSampleRateOut"]], "getsamples() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getSamples"]], "getsamples() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.getSamples"]], "getsamplesinterleaved() (libm2k.genericanalogin method)": [[2, "libm2k.GenericAnalogIn.getSamplesInterleaved"]], "getsamplesinterleaved() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getSamplesInterleaved"]], "getsamplesp() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.getSamplesP"]], "getsamplesraw() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getSamplesRaw"]], "getsamplesrawinterleaved() (libm2k.genericanalogin method)": [[2, "libm2k.GenericAnalogIn.getSamplesRawInterleaved"]], "getsamplesrawinterleaved() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getSamplesRawInterleaved"]], "getscalingfactor() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getScalingFactor"]], "getscalingfactor() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.getScalingFactor"]], "getserialnumber() (libm2k.context method)": [[2, "libm2k.Context.getSerialNumber"]], "getsynceddma() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.getSyncedDma"]], "getsyncedstartdma() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.getSyncedStartDma"]], "gettrigger() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getTrigger"]], "gettrigger() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.getTrigger"]], "gettrigger() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.getTrigger"]], "geturi() (libm2k.context method)": [[2, "libm2k.Context.getUri"]], "getvalueforrange() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getValueForRange"]], "getvalueraw() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.getValueRaw"]], "getversion() (in module libm2k)": [[2, "libm2k.getVersion"]], "getversion() (libm2k.contextbuilder static method)": [[2, "libm2k.ContextBuilder.getVersion"]], "getverticaloffset() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getVerticalOffset"]], "getvoltage() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getVoltage"]], "getvoltageraw() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.getVoltageRaw"]], "get_allocator() (libm2k.dmmreading method)": [[2, "libm2k.DMMReading.get_allocator"]], "get_allocator() (libm2k.dmms method)": [[2, "libm2k.DMMs.get_allocator"]], "get_allocator() (libm2k.iiobuffers method)": [[2, "libm2k.IioBuffers.get_allocator"]], "get_allocator() (libm2k.iiochannels method)": [[2, "libm2k.IioChannels.get_allocator"]], "get_allocator() (libm2k.iiodevices method)": [[2, "libm2k.IioDevices.get_allocator"]], "get_allocator() (libm2k.m2kanalogins method)": [[2, "libm2k.M2kAnalogIns.get_allocator"]], "get_allocator() (libm2k.m2kanalogouts method)": [[2, "libm2k.M2kAnalogOuts.get_allocator"]], "get_allocator() (libm2k.m2kconditionanalog method)": [[2, "libm2k.M2kConditionAnalog.get_allocator"]], "get_allocator() (libm2k.m2kconditiondigital method)": [[2, "libm2k.M2kConditionDigital.get_allocator"]], "get_allocator() (libm2k.m2kmodes method)": [[2, "libm2k.M2kModes.get_allocator"]], "get_allocator() (libm2k.vectorctxinfo method)": [[2, "libm2k.VectorCtxInfo.get_allocator"]], "get_allocator() (libm2k.vectord method)": [[2, "libm2k.VectorD.get_allocator"]], "get_allocator() (libm2k.vectori method)": [[2, "libm2k.VectorI.get_allocator"]], "get_allocator() (libm2k.vectorpairdd method)": [[2, "libm2k.VectorPairDD.get_allocator"]], "get_allocator() (libm2k.vectors method)": [[2, "libm2k.VectorS.get_allocator"]], "get_allocator() (libm2k.vectorstr method)": [[2, "libm2k.VectorStr.get_allocator"]], "get_allocator() (libm2k.vectorus method)": [[2, "libm2k.VectorUS.get_allocator"]], "get_allocator() (libm2k.vectorvectord method)": [[2, "libm2k.VectorVectorD.get_allocator"]], "get_allocator() (libm2k.vectorvectori method)": [[2, "libm2k.VectorVectorI.get_allocator"]], "get_allocator() (libm2k.vectorvectors method)": [[2, "libm2k.VectorVectorS.get_allocator"]], "get_allocator() (libm2k.vectorvectorus method)": [[2, "libm2k.VectorVectorUS.get_allocator"]], "git_tag (libm2k.iio_context_version property)": [[2, "libm2k.IIO_CONTEXT_VERSION.git_tag"]], "hascontextcalibration() (libm2k.m2k method)": [[2, "libm2k.M2k.hasContextCalibration"]], "hascrossinstrumenttrigger() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.hasCrossInstrumentTrigger"]], "hasexternaltriggerin() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.hasExternalTriggerIn"]], "hasexternaltriggerout() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.hasExternalTriggerOut"]], "hasmixedsignal() (libm2k.m2k method)": [[2, "libm2k.M2k.hasMixedSignal"]], "hw_name (libm2k.ini_device_struct property)": [[2, "libm2k.ini_device_struct.hw_name"]], "hysteresis (libm2k.settings property)": [[2, "libm2k.SETTINGS.hysteresis"]], "id (libm2k.dmm_reading property)": [[2, "libm2k.DMM_READING.id"]], "id_product (libm2k.context_info property)": [[2, "libm2k.CONTEXT_INFO.id_product"]], "id_vendor (libm2k.context_info property)": [[2, "libm2k.CONTEXT_INFO.id_vendor"]], "iiocode() (libm2k.m2k_exception method)": [[2, "libm2k.m2k_exception.iioCode"]], "iiocode() (libm2k.m2k_exception_builder method)": [[2, "libm2k.m2k_exception_builder.iioCode"]], "incr() (libm2k.swigpyiterator method)": [[2, "libm2k.SwigPyIterator.incr"]], "ini_device_struct (class in libm2k)": [[2, "libm2k.ini_device_struct"]], "initialize() (libm2k.m2kcalibration method)": [[2, "libm2k.M2kCalibration.initialize"]], "insert() (libm2k.dmmreading method)": [[2, "libm2k.DMMReading.insert"]], "insert() (libm2k.dmms method)": [[2, "libm2k.DMMs.insert"]], "insert() (libm2k.iiobuffers method)": [[2, "libm2k.IioBuffers.insert"]], "insert() (libm2k.iiochannels method)": [[2, "libm2k.IioChannels.insert"]], "insert() (libm2k.iiodevices method)": [[2, "libm2k.IioDevices.insert"]], "insert() (libm2k.m2kanalogins method)": [[2, "libm2k.M2kAnalogIns.insert"]], "insert() (libm2k.m2kanalogouts method)": [[2, "libm2k.M2kAnalogOuts.insert"]], "insert() (libm2k.m2kconditionanalog method)": [[2, "libm2k.M2kConditionAnalog.insert"]], "insert() (libm2k.m2kconditiondigital method)": [[2, "libm2k.M2kConditionDigital.insert"]], "insert() (libm2k.m2kmodes method)": [[2, "libm2k.M2kModes.insert"]], "insert() (libm2k.vectorctxinfo method)": [[2, "libm2k.VectorCtxInfo.insert"]], "insert() (libm2k.vectord method)": [[2, "libm2k.VectorD.insert"]], "insert() (libm2k.vectori method)": [[2, "libm2k.VectorI.insert"]], "insert() (libm2k.vectorpairdd method)": [[2, "libm2k.VectorPairDD.insert"]], "insert() (libm2k.vectors method)": [[2, "libm2k.VectorS.insert"]], "insert() (libm2k.vectorstr method)": [[2, "libm2k.VectorStr.insert"]], "insert() (libm2k.vectorus method)": [[2, "libm2k.VectorUS.insert"]], "insert() (libm2k.vectorvectord method)": [[2, "libm2k.VectorVectorD.insert"]], "insert() (libm2k.vectorvectori method)": [[2, "libm2k.VectorVectorI.insert"]], "insert() (libm2k.vectorvectors method)": [[2, "libm2k.VectorVectorS.insert"]], "insert() (libm2k.vectorvectorus method)": [[2, "libm2k.VectorVectorUS.insert"]], "iscalibrated() (libm2k.m2k method)": [[2, "libm2k.M2k.isCalibrated"]], "ischannelenabled() (libm2k.genericanalogout method)": [[2, "libm2k.GenericAnalogOut.isChannelEnabled"]], "ischannelenabled() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.isChannelEnabled"]], "ischannelenabled() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.isChannelEnabled"]], "isclocksourceexternal() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.isClocksourceExternal"]], "isinitialized() (libm2k.m2kcalibration method)": [[2, "libm2k.M2kCalibration.isInitialized"]], "ispushdone() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.isPushDone"]], "iterator() (libm2k.dmmreading method)": [[2, "libm2k.DMMReading.iterator"]], "iterator() (libm2k.dmms method)": [[2, "libm2k.DMMs.iterator"]], "iterator() (libm2k.iiobuffers method)": [[2, "libm2k.IioBuffers.iterator"]], "iterator() (libm2k.iiochannels method)": [[2, "libm2k.IioChannels.iterator"]], "iterator() (libm2k.iiodevices method)": [[2, "libm2k.IioDevices.iterator"]], "iterator() (libm2k.m2kanalogins method)": [[2, "libm2k.M2kAnalogIns.iterator"]], "iterator() (libm2k.m2kanalogouts method)": [[2, "libm2k.M2kAnalogOuts.iterator"]], "iterator() (libm2k.m2kconditionanalog method)": [[2, "libm2k.M2kConditionAnalog.iterator"]], "iterator() (libm2k.m2kconditiondigital method)": [[2, "libm2k.M2kConditionDigital.iterator"]], "iterator() (libm2k.m2kmodes method)": [[2, "libm2k.M2kModes.iterator"]], "iterator() (libm2k.vectorctxinfo method)": [[2, "libm2k.VectorCtxInfo.iterator"]], "iterator() (libm2k.vectord method)": [[2, "libm2k.VectorD.iterator"]], "iterator() (libm2k.vectori method)": [[2, "libm2k.VectorI.iterator"]], "iterator() (libm2k.vectorpairdd method)": [[2, "libm2k.VectorPairDD.iterator"]], "iterator() (libm2k.vectors method)": [[2, "libm2k.VectorS.iterator"]], "iterator() (libm2k.vectorstr method)": [[2, "libm2k.VectorStr.iterator"]], "iterator() (libm2k.vectorus method)": [[2, "libm2k.VectorUS.iterator"]], "iterator() (libm2k.vectorvectord method)": [[2, "libm2k.VectorVectorD.iterator"]], "iterator() (libm2k.vectorvectori method)": [[2, "libm2k.VectorVectorI.iterator"]], "iterator() (libm2k.vectorvectors method)": [[2, "libm2k.VectorVectorS.iterator"]], "iterator() (libm2k.vectorvectorus method)": [[2, "libm2k.VectorVectorUS.iterator"]], "key_val_pairs (libm2k.ini_device_struct property)": [[2, "libm2k.ini_device_struct.key_val_pairs"]], "level (libm2k.settings property)": [[2, "libm2k.SETTINGS.level"]], "libm2k": [[2, "module-libm2k"]], "line() (libm2k.m2k_exception method)": [[2, "libm2k.m2k_exception.line"]], "line() (libm2k.m2k_exception_builder method)": [[2, "libm2k.m2k_exception_builder.line"]], "logallattributes() (libm2k.context method)": [[2, "libm2k.Context.logAllAttributes"]], "m2kopen() (in module libm2k)": [[2, "libm2k.m2kOpen"]], "m2kopen() (libm2k.contextbuilder static method)": [[2, "libm2k.ContextBuilder.m2kOpen"]], "m2k_exception (class in libm2k)": [[2, "libm2k.m2k_exception"]], "m2k_exception_builder (class in libm2k)": [[2, "libm2k.m2k_exception_builder"]], "m2k_exception_make() (in module libm2k)": [[2, "libm2k.m2k_exception_make"]], "m_channel (libm2k.channel property)": [[2, "libm2k.channel.m_channel"]], "m_direction (libm2k.channel property)": [[2, "libm2k.channel.m_direction"]], "major (libm2k.iio_context_version property)": [[2, "libm2k.IIO_CONTEXT_VERSION.major"]], "make() (libm2k.m2k_exception static method)": [[2, "libm2k.m2k_exception.make"]], "manufacturer (libm2k.context_info property)": [[2, "libm2k.CONTEXT_INFO.manufacturer"]], "minor (libm2k.iio_context_version property)": [[2, "libm2k.IIO_CONTEXT_VERSION.minor"]], "mode (libm2k.settings property)": [[2, "libm2k.SETTINGS.mode"]], "module": [[2, "module-libm2k"]], "name (libm2k.dmm_reading property)": [[2, "libm2k.DMM_READING.name"]], "next() (libm2k.swigpyiterator method)": [[2, "libm2k.SwigPyIterator.next"]], "pop() (libm2k.dmmreading method)": [[2, "libm2k.DMMReading.pop"]], "pop() (libm2k.dmms method)": [[2, "libm2k.DMMs.pop"]], "pop() (libm2k.iiobuffers method)": [[2, "libm2k.IioBuffers.pop"]], "pop() (libm2k.iiochannels method)": [[2, "libm2k.IioChannels.pop"]], "pop() (libm2k.iiodevices method)": [[2, "libm2k.IioDevices.pop"]], "pop() (libm2k.m2kanalogins method)": [[2, "libm2k.M2kAnalogIns.pop"]], "pop() (libm2k.m2kanalogouts method)": [[2, "libm2k.M2kAnalogOuts.pop"]], "pop() (libm2k.m2kconditionanalog method)": [[2, "libm2k.M2kConditionAnalog.pop"]], "pop() (libm2k.m2kconditiondigital method)": [[2, "libm2k.M2kConditionDigital.pop"]], "pop() (libm2k.m2kmodes method)": [[2, "libm2k.M2kModes.pop"]], "pop() (libm2k.vectorctxinfo method)": [[2, "libm2k.VectorCtxInfo.pop"]], "pop() (libm2k.vectord method)": [[2, "libm2k.VectorD.pop"]], "pop() (libm2k.vectori method)": [[2, "libm2k.VectorI.pop"]], "pop() (libm2k.vectorpairdd method)": [[2, "libm2k.VectorPairDD.pop"]], "pop() (libm2k.vectors method)": [[2, "libm2k.VectorS.pop"]], "pop() (libm2k.vectorstr method)": [[2, "libm2k.VectorStr.pop"]], "pop() (libm2k.vectorus method)": [[2, "libm2k.VectorUS.pop"]], "pop() (libm2k.vectorvectord method)": [[2, "libm2k.VectorVectorD.pop"]], "pop() (libm2k.vectorvectori method)": [[2, "libm2k.VectorVectorI.pop"]], "pop() (libm2k.vectorvectors method)": [[2, "libm2k.VectorVectorS.pop"]], "pop() (libm2k.vectorvectorus method)": [[2, "libm2k.VectorVectorUS.pop"]], "pop_back() (libm2k.dmmreading method)": [[2, "libm2k.DMMReading.pop_back"]], "pop_back() (libm2k.dmms method)": [[2, "libm2k.DMMs.pop_back"]], "pop_back() (libm2k.iiobuffers method)": [[2, "libm2k.IioBuffers.pop_back"]], "pop_back() (libm2k.iiochannels method)": [[2, "libm2k.IioChannels.pop_back"]], "pop_back() (libm2k.iiodevices method)": [[2, "libm2k.IioDevices.pop_back"]], "pop_back() (libm2k.m2kanalogins method)": [[2, "libm2k.M2kAnalogIns.pop_back"]], "pop_back() (libm2k.m2kanalogouts method)": [[2, "libm2k.M2kAnalogOuts.pop_back"]], "pop_back() (libm2k.m2kconditionanalog method)": [[2, "libm2k.M2kConditionAnalog.pop_back"]], "pop_back() (libm2k.m2kconditiondigital method)": [[2, "libm2k.M2kConditionDigital.pop_back"]], "pop_back() (libm2k.m2kmodes method)": [[2, "libm2k.M2kModes.pop_back"]], "pop_back() (libm2k.vectorctxinfo method)": [[2, "libm2k.VectorCtxInfo.pop_back"]], "pop_back() (libm2k.vectord method)": [[2, "libm2k.VectorD.pop_back"]], "pop_back() (libm2k.vectori method)": [[2, "libm2k.VectorI.pop_back"]], "pop_back() (libm2k.vectorpairdd method)": [[2, "libm2k.VectorPairDD.pop_back"]], "pop_back() (libm2k.vectors method)": [[2, "libm2k.VectorS.pop_back"]], "pop_back() (libm2k.vectorstr method)": [[2, "libm2k.VectorStr.pop_back"]], "pop_back() (libm2k.vectorus method)": [[2, "libm2k.VectorUS.pop_back"]], "pop_back() (libm2k.vectorvectord method)": [[2, "libm2k.VectorVectorD.pop_back"]], "pop_back() (libm2k.vectorvectori method)": [[2, "libm2k.VectorVectorI.pop_back"]], "pop_back() (libm2k.vectorvectors method)": [[2, "libm2k.VectorVectorS.pop_back"]], "pop_back() (libm2k.vectorvectorus method)": [[2, "libm2k.VectorVectorUS.pop_back"]], "powerdowndacs() (libm2k.m2kpowersupply method)": [[2, "libm2k.M2kPowerSupply.powerDownDacs"]], "previous() (libm2k.swigpyiterator method)": [[2, "libm2k.SwigPyIterator.previous"]], "product (libm2k.context_info property)": [[2, "libm2k.CONTEXT_INFO.product"]], "push() (libm2k.genericanalogout method)": [[2, "libm2k.GenericAnalogOut.push"]], "push() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.push"]], "push() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.push"]], "pushbytes() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.pushBytes"]], "pushchannel() (libm2k.m2kpowersupply method)": [[2, "libm2k.M2kPowerSupply.pushChannel"]], "pushraw() (libm2k.genericanalogout method)": [[2, "libm2k.GenericAnalogOut.pushRaw"]], "pushraw() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.pushRaw"]], "pushrawbytes() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.pushRawBytes"]], "push_back() (libm2k.dmmreading method)": [[2, "libm2k.DMMReading.push_back"]], "push_back() (libm2k.dmms method)": [[2, "libm2k.DMMs.push_back"]], "push_back() (libm2k.iiobuffers method)": [[2, "libm2k.IioBuffers.push_back"]], "push_back() (libm2k.iiochannels method)": [[2, "libm2k.IioChannels.push_back"]], "push_back() (libm2k.iiodevices method)": [[2, "libm2k.IioDevices.push_back"]], "push_back() (libm2k.m2kanalogins method)": [[2, "libm2k.M2kAnalogIns.push_back"]], "push_back() (libm2k.m2kanalogouts method)": [[2, "libm2k.M2kAnalogOuts.push_back"]], "push_back() (libm2k.m2kconditionanalog method)": [[2, "libm2k.M2kConditionAnalog.push_back"]], "push_back() (libm2k.m2kconditiondigital method)": [[2, "libm2k.M2kConditionDigital.push_back"]], "push_back() (libm2k.m2kmodes method)": [[2, "libm2k.M2kModes.push_back"]], "push_back() (libm2k.vectorctxinfo method)": [[2, "libm2k.VectorCtxInfo.push_back"]], "push_back() (libm2k.vectord method)": [[2, "libm2k.VectorD.push_back"]], "push_back() (libm2k.vectori method)": [[2, "libm2k.VectorI.push_back"]], "push_back() (libm2k.vectorpairdd method)": [[2, "libm2k.VectorPairDD.push_back"]], "push_back() (libm2k.vectors method)": [[2, "libm2k.VectorS.push_back"]], "push_back() (libm2k.vectorstr method)": [[2, "libm2k.VectorStr.push_back"]], "push_back() (libm2k.vectorus method)": [[2, "libm2k.VectorUS.push_back"]], "push_back() (libm2k.vectorvectord method)": [[2, "libm2k.VectorVectorD.push_back"]], "push_back() (libm2k.vectorvectori method)": [[2, "libm2k.VectorVectorI.push_back"]], "push_back() (libm2k.vectorvectors method)": [[2, "libm2k.VectorVectorS.push_back"]], "push_back() (libm2k.vectorvectorus method)": [[2, "libm2k.VectorVectorUS.push_back"]], "raw_level (libm2k.settings property)": [[2, "libm2k.SETTINGS.raw_level"]], "rbegin() (libm2k.dmmreading method)": [[2, "libm2k.DMMReading.rbegin"]], "rbegin() (libm2k.dmms method)": [[2, "libm2k.DMMs.rbegin"]], "rbegin() (libm2k.iiobuffers method)": [[2, "libm2k.IioBuffers.rbegin"]], "rbegin() (libm2k.iiochannels method)": [[2, "libm2k.IioChannels.rbegin"]], "rbegin() (libm2k.iiodevices method)": [[2, "libm2k.IioDevices.rbegin"]], "rbegin() (libm2k.m2kanalogins method)": [[2, "libm2k.M2kAnalogIns.rbegin"]], "rbegin() (libm2k.m2kanalogouts method)": [[2, "libm2k.M2kAnalogOuts.rbegin"]], "rbegin() (libm2k.m2kconditionanalog method)": [[2, "libm2k.M2kConditionAnalog.rbegin"]], "rbegin() (libm2k.m2kconditiondigital method)": [[2, "libm2k.M2kConditionDigital.rbegin"]], "rbegin() (libm2k.m2kmodes method)": [[2, "libm2k.M2kModes.rbegin"]], "rbegin() (libm2k.vectorctxinfo method)": [[2, "libm2k.VectorCtxInfo.rbegin"]], "rbegin() (libm2k.vectord method)": [[2, "libm2k.VectorD.rbegin"]], "rbegin() (libm2k.vectori method)": [[2, "libm2k.VectorI.rbegin"]], "rbegin() (libm2k.vectorpairdd method)": [[2, "libm2k.VectorPairDD.rbegin"]], "rbegin() (libm2k.vectors method)": [[2, "libm2k.VectorS.rbegin"]], "rbegin() (libm2k.vectorstr method)": [[2, "libm2k.VectorStr.rbegin"]], "rbegin() (libm2k.vectorus method)": [[2, "libm2k.VectorUS.rbegin"]], "rbegin() (libm2k.vectorvectord method)": [[2, "libm2k.VectorVectorD.rbegin"]], "rbegin() (libm2k.vectorvectori method)": [[2, "libm2k.VectorVectorI.rbegin"]], "rbegin() (libm2k.vectorvectors method)": [[2, "libm2k.VectorVectorS.rbegin"]], "rbegin() (libm2k.vectorvectorus method)": [[2, "libm2k.VectorVectorUS.rbegin"]], "readall() (libm2k.dmm method)": [[2, "libm2k.DMM.readAll"]], "readchannel() (libm2k.dmm method)": [[2, "libm2k.DMM.readChannel"]], "readchannel() (libm2k.m2kpowersupply method)": [[2, "libm2k.M2kPowerSupply.readChannel"]], "rend() (libm2k.dmmreading method)": [[2, "libm2k.DMMReading.rend"]], "rend() (libm2k.dmms method)": [[2, "libm2k.DMMs.rend"]], "rend() (libm2k.iiobuffers method)": [[2, "libm2k.IioBuffers.rend"]], "rend() (libm2k.iiochannels method)": [[2, "libm2k.IioChannels.rend"]], "rend() (libm2k.iiodevices method)": [[2, "libm2k.IioDevices.rend"]], "rend() (libm2k.m2kanalogins method)": [[2, "libm2k.M2kAnalogIns.rend"]], "rend() (libm2k.m2kanalogouts method)": [[2, "libm2k.M2kAnalogOuts.rend"]], "rend() (libm2k.m2kconditionanalog method)": [[2, "libm2k.M2kConditionAnalog.rend"]], "rend() (libm2k.m2kconditiondigital method)": [[2, "libm2k.M2kConditionDigital.rend"]], "rend() (libm2k.m2kmodes method)": [[2, "libm2k.M2kModes.rend"]], "rend() (libm2k.vectorctxinfo method)": [[2, "libm2k.VectorCtxInfo.rend"]], "rend() (libm2k.vectord method)": [[2, "libm2k.VectorD.rend"]], "rend() (libm2k.vectori method)": [[2, "libm2k.VectorI.rend"]], "rend() (libm2k.vectorpairdd method)": [[2, "libm2k.VectorPairDD.rend"]], "rend() (libm2k.vectors method)": [[2, "libm2k.VectorS.rend"]], "rend() (libm2k.vectorstr method)": [[2, "libm2k.VectorStr.rend"]], "rend() (libm2k.vectorus method)": [[2, "libm2k.VectorUS.rend"]], "rend() (libm2k.vectorvectord method)": [[2, "libm2k.VectorVectorD.rend"]], "rend() (libm2k.vectorvectori method)": [[2, "libm2k.VectorVectorI.rend"]], "rend() (libm2k.vectorvectors method)": [[2, "libm2k.VectorVectorS.rend"]], "rend() (libm2k.vectorvectorus method)": [[2, "libm2k.VectorVectorUS.rend"]], "reserve() (libm2k.dmmreading method)": [[2, "libm2k.DMMReading.reserve"]], "reserve() (libm2k.dmms method)": [[2, "libm2k.DMMs.reserve"]], "reserve() (libm2k.iiobuffers method)": [[2, "libm2k.IioBuffers.reserve"]], "reserve() (libm2k.iiochannels method)": [[2, "libm2k.IioChannels.reserve"]], "reserve() (libm2k.iiodevices method)": [[2, "libm2k.IioDevices.reserve"]], "reserve() (libm2k.m2kanalogins method)": [[2, "libm2k.M2kAnalogIns.reserve"]], "reserve() (libm2k.m2kanalogouts method)": [[2, "libm2k.M2kAnalogOuts.reserve"]], "reserve() (libm2k.m2kconditionanalog method)": [[2, "libm2k.M2kConditionAnalog.reserve"]], "reserve() (libm2k.m2kconditiondigital method)": [[2, "libm2k.M2kConditionDigital.reserve"]], "reserve() (libm2k.m2kmodes method)": [[2, "libm2k.M2kModes.reserve"]], "reserve() (libm2k.vectorctxinfo method)": [[2, "libm2k.VectorCtxInfo.reserve"]], "reserve() (libm2k.vectord method)": [[2, "libm2k.VectorD.reserve"]], "reserve() (libm2k.vectori method)": [[2, "libm2k.VectorI.reserve"]], "reserve() (libm2k.vectorpairdd method)": [[2, "libm2k.VectorPairDD.reserve"]], "reserve() (libm2k.vectors method)": [[2, "libm2k.VectorS.reserve"]], "reserve() (libm2k.vectorstr method)": [[2, "libm2k.VectorStr.reserve"]], "reserve() (libm2k.vectorus method)": [[2, "libm2k.VectorUS.reserve"]], "reserve() (libm2k.vectorvectord method)": [[2, "libm2k.VectorVectorD.reserve"]], "reserve() (libm2k.vectorvectori method)": [[2, "libm2k.VectorVectorI.reserve"]], "reserve() (libm2k.vectorvectors method)": [[2, "libm2k.VectorVectorS.reserve"]], "reserve() (libm2k.vectorvectorus method)": [[2, "libm2k.VectorVectorUS.reserve"]], "reset() (libm2k.context method)": [[2, "libm2k.Context.reset"]], "reset() (libm2k.dmm method)": [[2, "libm2k.DMM.reset"]], "reset() (libm2k.m2k method)": [[2, "libm2k.M2k.reset"]], "reset() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.reset"]], "reset() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.reset"]], "reset() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.reset"]], "reset() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.reset"]], "reset() (libm2k.m2kpowersupply method)": [[2, "libm2k.M2kPowerSupply.reset"]], "resetcalibration() (libm2k.m2k method)": [[2, "libm2k.M2k.resetCalibration"]], "resetcalibration() (libm2k.m2kcalibration method)": [[2, "libm2k.M2kCalibration.resetCalibration"]], "resetratemux() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.resetRateMux"]], "resize() (libm2k.dmmreading method)": [[2, "libm2k.DMMReading.resize"]], "resize() (libm2k.dmms method)": [[2, "libm2k.DMMs.resize"]], "resize() (libm2k.iiobuffers method)": [[2, "libm2k.IioBuffers.resize"]], "resize() (libm2k.iiochannels method)": [[2, "libm2k.IioChannels.resize"]], "resize() (libm2k.iiodevices method)": [[2, "libm2k.IioDevices.resize"]], "resize() (libm2k.m2kanalogins method)": [[2, "libm2k.M2kAnalogIns.resize"]], "resize() (libm2k.m2kanalogouts method)": [[2, "libm2k.M2kAnalogOuts.resize"]], "resize() (libm2k.m2kconditionanalog method)": [[2, "libm2k.M2kConditionAnalog.resize"]], "resize() (libm2k.m2kconditiondigital method)": [[2, "libm2k.M2kConditionDigital.resize"]], "resize() (libm2k.m2kmodes method)": [[2, "libm2k.M2kModes.resize"]], "resize() (libm2k.vectorctxinfo method)": [[2, "libm2k.VectorCtxInfo.resize"]], "resize() (libm2k.vectord method)": [[2, "libm2k.VectorD.resize"]], "resize() (libm2k.vectori method)": [[2, "libm2k.VectorI.resize"]], "resize() (libm2k.vectorpairdd method)": [[2, "libm2k.VectorPairDD.resize"]], "resize() (libm2k.vectors method)": [[2, "libm2k.VectorS.resize"]], "resize() (libm2k.vectorstr method)": [[2, "libm2k.VectorStr.resize"]], "resize() (libm2k.vectorus method)": [[2, "libm2k.VectorUS.resize"]], "resize() (libm2k.vectorvectord method)": [[2, "libm2k.VectorVectorD.resize"]], "resize() (libm2k.vectorvectori method)": [[2, "libm2k.VectorVectorI.resize"]], "resize() (libm2k.vectorvectors method)": [[2, "libm2k.VectorVectorS.resize"]], "resize() (libm2k.vectorvectorus method)": [[2, "libm2k.VectorVectorUS.resize"]], "second (libm2k.pairdd property)": [[2, "libm2k.PairDD.second"]], "serial (libm2k.context_info property)": [[2, "libm2k.CONTEXT_INFO.serial"]], "setadccalibrationgain() (libm2k.m2k method)": [[2, "libm2k.M2k.setAdcCalibrationGain"]], "setadccalibrationoffset() (libm2k.m2k method)": [[2, "libm2k.M2k.setAdcCalibrationOffset"]], "setadcgain() (libm2k.m2kcalibration method)": [[2, "libm2k.M2kCalibration.setAdcGain"]], "setadcoffset() (libm2k.m2kcalibration method)": [[2, "libm2k.M2kCalibration.setAdcOffset"]], "setanalogcondition() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.setAnalogCondition"]], "setanalogdelay() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.setAnalogDelay"]], "setanalogexternalcondition() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.setAnalogExternalCondition"]], "setanalogexternaloutselect() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.setAnalogExternalOutSelect"]], "setanaloghysteresis() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.setAnalogHysteresis"]], "setanaloglevel() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.setAnalogLevel"]], "setanaloglevelraw() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.setAnalogLevelRaw"]], "setanalogmode() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.setAnalogMode"]], "setanalogouttriggercondition() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.setAnalogOutTriggerCondition"]], "setanalogouttriggersource() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.setAnalogOutTriggerSource"]], "setanalogouttriggerstatus() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.setAnalogOutTriggerStatus"]], "setanalogsource() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.setAnalogSource"]], "setanalogsourcechannel() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.setAnalogSourceChannel"]], "setanalogstreamingflag() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.setAnalogStreamingFlag"]], "setbufferrearmontrigger() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.setBufferRearmOnTrigger"]], "setcalibparameters() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.setCalibParameters"]], "setcyclic() (libm2k.genericanalogout method)": [[2, "libm2k.GenericAnalogOut.setCyclic"]], "setcyclic() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.setCyclic"]], "setcyclic() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.setCyclic"]], "setdaccalibrationgain() (libm2k.m2k method)": [[2, "libm2k.M2k.setDacCalibrationGain"]], "setdaccalibrationoffset() (libm2k.m2k method)": [[2, "libm2k.M2k.setDacCalibrationOffset"]], "setdacgain() (libm2k.m2kcalibration method)": [[2, "libm2k.M2kCalibration.setDacGain"]], "setdacoffset() (libm2k.m2kcalibration method)": [[2, "libm2k.M2kCalibration.setDacOffset"]], "setdigitalcondition() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.setDigitalCondition"]], "setdigitaldelay() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.setDigitalDelay"]], "setdigitalexternalcondition() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.setDigitalExternalCondition"]], "setdigitalmode() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.setDigitalMode"]], "setdigitalsource() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.setDigitalSource"]], "setdigitalstreamingflag() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.setDigitalStreamingFlag"]], "setdirection() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.setDirection"]], "setexternalclocksource() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.setExternalClocksource"]], "sethwtriggersettings() (libm2k.m2khardwaretrigger method)": [[2, "libm2k.M2kHardwareTrigger.setHwTriggerSettings"]], "setkernelbufferscount() (libm2k.genericanalogin method)": [[2, "libm2k.GenericAnalogIn.setKernelBuffersCount"]], "setkernelbufferscount() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.setKernelBuffersCount"]], "setkernelbufferscount() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.setKernelBuffersCount"]], "setkernelbufferscountin() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.setKernelBuffersCountIn"]], "setkernelbufferscountout() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.setKernelBuffersCountOut"]], "setled() (libm2k.m2k method)": [[2, "libm2k.M2k.setLed"]], "setoutputmode() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.setOutputMode"]], "setoversamplingratio() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.setOversamplingRatio"]], "setoversamplingratio() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.setOversamplingRatio"]], "setrange() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.setRange"]], "setratemux() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.setRateMux"]], "setsamplerate() (libm2k.genericanalogin method)": [[2, "libm2k.GenericAnalogIn.setSampleRate"]], "setsamplerate() (libm2k.genericanalogout method)": [[2, "libm2k.GenericAnalogOut.setSampleRate"]], "setsamplerate() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.setSampleRate"]], "setsamplerate() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.setSampleRate"]], "setsampleratein() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.setSampleRateIn"]], "setsamplerateout() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.setSampleRateOut"]], "setsynceddma() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.setSyncedDma"]], "setsyncedstartdma() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.setSyncedStartDma"]], "settimeout() (libm2k.context method)": [[2, "libm2k.Context.setTimeout"]], "setvalueraw() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.setValueRaw"]], "setverticaloffset() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.setVerticalOffset"]], "setvoltage() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.setVoltage"]], "setvoltageraw() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.setVoltageRaw"]], "size() (libm2k.dmmreading method)": [[2, "libm2k.DMMReading.size"]], "size() (libm2k.dmms method)": [[2, "libm2k.DMMs.size"]], "size() (libm2k.iiobuffers method)": [[2, "libm2k.IioBuffers.size"]], "size() (libm2k.iiochannels method)": [[2, "libm2k.IioChannels.size"]], "size() (libm2k.iiodevices method)": [[2, "libm2k.IioDevices.size"]], "size() (libm2k.m2kanalogins method)": [[2, "libm2k.M2kAnalogIns.size"]], "size() (libm2k.m2kanalogouts method)": [[2, "libm2k.M2kAnalogOuts.size"]], "size() (libm2k.m2kconditionanalog method)": [[2, "libm2k.M2kConditionAnalog.size"]], "size() (libm2k.m2kconditiondigital method)": [[2, "libm2k.M2kConditionDigital.size"]], "size() (libm2k.m2kmodes method)": [[2, "libm2k.M2kModes.size"]], "size() (libm2k.vectorctxinfo method)": [[2, "libm2k.VectorCtxInfo.size"]], "size() (libm2k.vectord method)": [[2, "libm2k.VectorD.size"]], "size() (libm2k.vectori method)": [[2, "libm2k.VectorI.size"]], "size() (libm2k.vectorpairdd method)": [[2, "libm2k.VectorPairDD.size"]], "size() (libm2k.vectors method)": [[2, "libm2k.VectorS.size"]], "size() (libm2k.vectorstr method)": [[2, "libm2k.VectorStr.size"]], "size() (libm2k.vectorus method)": [[2, "libm2k.VectorUS.size"]], "size() (libm2k.vectorvectord method)": [[2, "libm2k.VectorVectorD.size"]], "size() (libm2k.vectorvectori method)": [[2, "libm2k.VectorVectorI.size"]], "size() (libm2k.vectorvectors method)": [[2, "libm2k.VectorVectorS.size"]], "size() (libm2k.vectorvectorus method)": [[2, "libm2k.VectorVectorUS.size"]], "startacquisition() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.startAcquisition"]], "startacquisition() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.startAcquisition"]], "startmixedsignalacquisition() (libm2k.m2k method)": [[2, "libm2k.M2k.startMixedSignalAcquisition"]], "stop() (libm2k.genericanalogout method)": [[2, "libm2k.GenericAnalogOut.stop"]], "stop() (libm2k.m2kanalogout method)": [[2, "libm2k.M2kAnalogOut.stop"]], "stopacquisition() (libm2k.m2kanalogin method)": [[2, "libm2k.M2kAnalogIn.stopAcquisition"]], "stopacquisition() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.stopAcquisition"]], "stopbufferout() (libm2k.m2kdigital method)": [[2, "libm2k.M2kDigital.stopBufferOut"]], "stopmixedsignalacquisition() (libm2k.m2k method)": [[2, "libm2k.M2k.stopMixedSignalAcquisition"]], "swap() (libm2k.dmmreading method)": [[2, "libm2k.DMMReading.swap"]], "swap() (libm2k.dmms method)": [[2, "libm2k.DMMs.swap"]], "swap() (libm2k.iiobuffers method)": [[2, "libm2k.IioBuffers.swap"]], "swap() (libm2k.iiochannels method)": [[2, "libm2k.IioChannels.swap"]], "swap() (libm2k.iiodevices method)": [[2, "libm2k.IioDevices.swap"]], "swap() (libm2k.m2kanalogins method)": [[2, "libm2k.M2kAnalogIns.swap"]], "swap() (libm2k.m2kanalogouts method)": [[2, "libm2k.M2kAnalogOuts.swap"]], "swap() (libm2k.m2kconditionanalog method)": [[2, "libm2k.M2kConditionAnalog.swap"]], "swap() (libm2k.m2kconditiondigital method)": [[2, "libm2k.M2kConditionDigital.swap"]], "swap() (libm2k.m2kmodes method)": [[2, "libm2k.M2kModes.swap"]], "swap() (libm2k.vectorctxinfo method)": [[2, "libm2k.VectorCtxInfo.swap"]], "swap() (libm2k.vectord method)": [[2, "libm2k.VectorD.swap"]], "swap() (libm2k.vectori method)": [[2, "libm2k.VectorI.swap"]], "swap() (libm2k.vectorpairdd method)": [[2, "libm2k.VectorPairDD.swap"]], "swap() (libm2k.vectors method)": [[2, "libm2k.VectorS.swap"]], "swap() (libm2k.vectorstr method)": [[2, "libm2k.VectorStr.swap"]], "swap() (libm2k.vectorus method)": [[2, "libm2k.VectorUS.swap"]], "swap() (libm2k.vectorvectord method)": [[2, "libm2k.VectorVectorD.swap"]], "swap() (libm2k.vectorvectori method)": [[2, "libm2k.VectorVectorI.swap"]], "swap() (libm2k.vectorvectors method)": [[2, "libm2k.VectorVectorS.swap"]], "swap() (libm2k.vectorvectorus method)": [[2, "libm2k.VectorVectorUS.swap"]], "thisown (libm2k.calibration_parameters property)": [[2, "libm2k.CALIBRATION_PARAMETERS.thisown"]], "thisown (libm2k.context_info property)": [[2, "libm2k.CONTEXT_INFO.thisown"]], "thisown (libm2k.context property)": [[2, "libm2k.Context.thisown"]], "thisown (libm2k.contextbuilder property)": [[2, "libm2k.ContextBuilder.thisown"]], "thisown (libm2k.dmm property)": [[2, "libm2k.DMM.thisown"]], "thisown (libm2k.dmmreading property)": [[2, "libm2k.DMMReading.thisown"]], "thisown (libm2k.dmm_reading property)": [[2, "libm2k.DMM_READING.thisown"]], "thisown (libm2k.dmms property)": [[2, "libm2k.DMMs.thisown"]], "thisown (libm2k.fmcomms property)": [[2, "libm2k.FMCOMMS.thisown"]], "thisown (libm2k.generic property)": [[2, "libm2k.Generic.thisown"]], "thisown (libm2k.genericanalogin property)": [[2, "libm2k.GenericAnalogIn.thisown"]], "thisown (libm2k.genericanalogout property)": [[2, "libm2k.GenericAnalogOut.thisown"]], "thisown (libm2k.iio_context_version property)": [[2, "libm2k.IIO_CONTEXT_VERSION.thisown"]], "thisown (libm2k.iio_objects property)": [[2, "libm2k.IIO_OBJECTS.thisown"]], "thisown (libm2k.iiobuffers property)": [[2, "libm2k.IioBuffers.thisown"]], "thisown (libm2k.iiochannels property)": [[2, "libm2k.IioChannels.thisown"]], "thisown (libm2k.iiodevices property)": [[2, "libm2k.IioDevices.thisown"]], "thisown (libm2k.m2k property)": [[2, "libm2k.M2k.thisown"]], "thisown (libm2k.m2kanalogin property)": [[2, "libm2k.M2kAnalogIn.thisown"]], "thisown (libm2k.m2kanalogins property)": [[2, "libm2k.M2kAnalogIns.thisown"]], "thisown (libm2k.m2kanalogout property)": [[2, "libm2k.M2kAnalogOut.thisown"]], "thisown (libm2k.m2kanalogouts property)": [[2, "libm2k.M2kAnalogOuts.thisown"]], "thisown (libm2k.m2kcalibration property)": [[2, "libm2k.M2kCalibration.thisown"]], "thisown (libm2k.m2kconditionanalog property)": [[2, "libm2k.M2kConditionAnalog.thisown"]], "thisown (libm2k.m2kconditiondigital property)": [[2, "libm2k.M2kConditionDigital.thisown"]], "thisown (libm2k.m2kdigital property)": [[2, "libm2k.M2kDigital.thisown"]], "thisown (libm2k.m2khardwaretrigger property)": [[2, "libm2k.M2kHardwareTrigger.thisown"]], "thisown (libm2k.m2kmodes property)": [[2, "libm2k.M2kModes.thisown"]], "thisown (libm2k.m2kpowersupply property)": [[2, "libm2k.M2kPowerSupply.thisown"]], "thisown (libm2k.pairdd property)": [[2, "libm2k.PairDD.thisown"]], "thisown (libm2k.settings property)": [[2, "libm2k.SETTINGS.thisown"]], "thisown (libm2k.swigpyiterator property)": [[2, "libm2k.SwigPyIterator.thisown"]], "thisown (libm2k.vectorctxinfo property)": [[2, "libm2k.VectorCtxInfo.thisown"]], "thisown (libm2k.vectord property)": [[2, "libm2k.VectorD.thisown"]], "thisown (libm2k.vectori property)": [[2, "libm2k.VectorI.thisown"]], "thisown (libm2k.vectorpairdd property)": [[2, "libm2k.VectorPairDD.thisown"]], "thisown (libm2k.vectors property)": [[2, "libm2k.VectorS.thisown"]], "thisown (libm2k.vectorstr property)": [[2, "libm2k.VectorStr.thisown"]], "thisown (libm2k.vectorus property)": [[2, "libm2k.VectorUS.thisown"]], "thisown (libm2k.vectorvectord property)": [[2, "libm2k.VectorVectorD.thisown"]], "thisown (libm2k.vectorvectori property)": [[2, "libm2k.VectorVectorI.thisown"]], "thisown (libm2k.vectorvectors property)": [[2, "libm2k.VectorVectorS.thisown"]], "thisown (libm2k.vectorvectorus property)": [[2, "libm2k.VectorVectorUS.thisown"]], "thisown (libm2k.channel property)": [[2, "libm2k.channel.thisown"]], "thisown (libm2k.ini_device_struct property)": [[2, "libm2k.ini_device_struct.thisown"]], "thisown (libm2k.m2k_exception property)": [[2, "libm2k.m2k_exception.thisown"]], "thisown (libm2k.m2k_exception_builder property)": [[2, "libm2k.m2k_exception_builder.thisown"]], "throw_exception() (in module libm2k)": [[2, "libm2k.throw_exception"]], "togeneric() (libm2k.context method)": [[2, "libm2k.Context.toGeneric"]], "tom2k() (libm2k.context method)": [[2, "libm2k.Context.toM2k"]], "trigger_source (libm2k.settings property)": [[2, "libm2k.SETTINGS.trigger_source"]], "type() (libm2k.m2k_exception method)": [[2, "libm2k.m2k_exception.type"]], "type() (libm2k.m2k_exception_builder method)": [[2, "libm2k.m2k_exception_builder.type"]], "unit_name (libm2k.dmm_reading property)": [[2, "libm2k.DMM_READING.unit_name"]], "unit_symbol (libm2k.dmm_reading property)": [[2, "libm2k.DMM_READING.unit_symbol"]], "uri (libm2k.context_info property)": [[2, "libm2k.CONTEXT_INFO.uri"]], "value (libm2k.dmm_reading property)": [[2, "libm2k.DMM_READING.value"]], "value() (libm2k.swigpyiterator method)": [[2, "libm2k.SwigPyIterator.value"]], "what() (libm2k.m2k_exception method)": [[2, "libm2k.m2k_exception.what"]]}})