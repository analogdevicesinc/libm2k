variables:
  libiioPipelineId: 9
  PYTHON: python
  PIP: pip
  AnalogDevices_OpenSource_GUID: '02a28b00-b3c8-4fdf-af9c-c2460499147f'
  IS_PULL_REQUEST: ${{ eq('$(Build.Reason)', 'PullRequest') }}
  BRANCH_NAME: $(Build.SourceBranchName)
  REPO_SLUG: $(Build.Repository.Name)
  CURRENT_COMMIT: $(Build.SourceVersion)

trigger:
- main
- master
- staging/*
- 20*
- v*.*.*
- ci-*

pr:
- main
- master
- 20*

parameters:
  - name: pythonVersions
    type: object
    default:
    - 3.11
    - '3.10'
    - 3.9
    - 3.8
    - 3.7

jobs:
- job: LinuxBuilds
  strategy:
    matrix:
      ubuntu_20_04:
        imageName: 'ubuntu-20.04'
        OS_TYPE: 'ubuntu_docker'
        OS_VERSION: focal
        artifactName: 'Linux-Ubuntu-20.04'
        PACKAGE_TO_INSTALL: 'build/*.deb'
      ubuntu_22_04:
        imageName: 'ubuntu-22.04'
        OS_TYPE: 'ubuntu_docker'
        OS_VERSION: jammy
        artifactName: 'Linux-Ubuntu-22.04'
        PACKAGE_TO_INSTALL: 'build/*.deb'
      deploy_doxygen:
        imageName: 'ubuntu-20.04'
        OS_TYPE: 'doxygen'
        OS_VERSION: focal
        artifactName: 'Linux-Ubuntu-20.04'
        PACKAGE_TO_INSTALL: 'build/*.deb'
  pool:
    vmImage: $(imageName)
  steps:
  - checkout: self
    fetchDepth: 1
    clean: true
    persistCredentials: true
  - script: ./CI/travis/before_install_linux
    displayName: "Install Dependencies"
  - script: ./CI/travis/make_linux
    displayName: "Build"
  - task: CopyFiles@2
    condition: ne(variables['System.JobName'], 'deploy_doxygen')
    inputs:
      sourceFolder: '$(Agent.BuildDirectory)/s/build/'
      contents: '$(Agent.BuildDirectory)/s/build/?(*.deb|*.rpm)'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishPipelineArtifact@1
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), ne(variables['System.JobName'], 'deploy_doxygen'))
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifactName: '$(artifactName)'

- job: macOSBuilds
  workspace:
    clean: all
  strategy:
    matrix:
      macOS_11:
        poolName: 'Azure Pipelines'
        vmImage: 'macOS-11'
        agentName: 'Azure Pipelines 4'
        artifactName: 'macOS-11'
      macOS_12:
        poolName: 'Azure Pipelines'
        vmImage: 'macOS-12'
        agentName: 'Azure Pipelines 3'
        artifactName: 'macOS-12'
      macOS_13_x64:
        poolName: 'Azure Pipelines'
        vmImage: 'macOS-13'
        agentName: 'Azure Pipelines 2'
        artifactName: 'macOS-13-x64'
      macOS_13_arm64:
        poolName: 'Default'
        vmImage:
        agentName: 'macOS_arm64'
        artifactName: 'macOS-13-arm64'
  pool:
    name: $(poolName)
    vmImage: $(vmImage)
    demands:
      - agent.name -equals $(agentName)
  variables:
    PACKAGE_TO_INSTALL: 'build/*.pkg'
  steps:
  - checkout: self
    fetchDepth: 1
    clean: true
  - script: ./CI/travis/before_install_darwin
    displayName: "Install Dependencies"
    condition: ne(variables['agentName'],'macOS_arm64')
  - script: ./CI/travis/make_darwin
    displayName: "Build"
  - ${{ each pyVersion in parameters.pythonVersions }}:
    - task: UsePythonVersion@0
      displayName: Use Python ${{ pyVersion }}
      inputs:
        versionSpec: '${{ pyVersion }}'
    - script: |
            python3 --version
            python3 -m pip install wheel twine build virtualenv
            cd '$(Agent.BuildDirectory)/s/build/'
            mkdir -p wheelhouse
            export COMPILE_BINDINGS=True
            python3 -m build
            export COMPILE_BINDINGS=
            cp dist/*.whl wheelhouse
      displayName: Wheel Python ${{ pyVersion }}
  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Agent.BuildDirectory)/s/build/'
      contents: '$(Agent.BuildDirectory)/s/build/?(*.pkg)'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Agent.BuildDirectory)/s/build/'
      contents: '$(Agent.BuildDirectory)/s/build/wheelhouse/?(*.whl)'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Agent.BuildDirectory)/s/build_tar/'
      contents: '$(Agent.BuildDirectory)/s/build_tar/?(*.tar.gz)'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishPipelineArtifact@1
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifactName: '$(artifactName)'
  - script: |
      python -m pip install --upgrade pip twine
      cd '$(Agent.BuildDirectory)/s/build/wheelhouse/'
      python -m twine upload --repository "testpypi" *.whl
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    displayName: "Upload to PyPI"
    env:
      TWINE_USERNAME: '__token__'
      TWINE_PASSWORD: $(TWINE_PASSWORD)
