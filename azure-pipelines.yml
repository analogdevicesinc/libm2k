variables:
  libiioPipelineId: 9
  PYTHON: python
  PIP: pip
  AnalogDevices_OpenSource_GUID: '02a28b00-b3c8-4fdf-af9c-c2460499147f'
  IS_PULL_REQUEST: ${{ eq('$(Build.Reason)', 'PullRequest') }}
  BRANCH_NAME: $(Build.SourceBranchName)
  REPO_SLUG: $(Build.Repository.Name)
  CURRENT_COMMIT: $(Build.SourceVersion)

trigger:
- main
- master
- staging/*
- 20*
- v*.*.*
- ci-*

pr:
- main
- master
- 20*

jobs:
- job: LinuxBuilds
  strategy:
    matrix:
      ubuntu_18_04_x86_64:
        imageName: 'ubuntu-latest'
        OS_TYPE: 'ubuntu_docker'
        OS_VERSION: bionic
        artifactName: 'Linux-Ubuntu-18.04-x86_64'
        PACKAGE_TO_INSTALL: 'build/*.deb'
      ubuntu_20_04_x86_64:
        imageName: 'ubuntu-latest'
        OS_TYPE: 'ubuntu_docker'
        OS_VERSION: focal
        artifactName: 'Linux-Ubuntu-20.04-x86_64'
        PACKAGE_TO_INSTALL: 'build/*.deb'
      debian_buster_arm32v7:
        imageName: 'ubuntu-latest'
        OS_TYPE: 'arm32v7/debian_docker'
        OS_VERSION: 'buster'
        artifactName: 'Linux-Debian-Buster-ARM'
        PACKAGE_TO_INSTALL: 'build/*.deb'
      debian_buster_arm64v8:
        imageName: 'ubuntu-latest'
        OS_TYPE: 'arm64v8/debian_docker'
        OS_VERSION: 'buster'
        artifactName: 'Linux-Debian-Buster-ARM64'
        PACKAGE_TO_INSTALL: 'build/*.deb'
      deploy_doxygen:
        imageName: 'ubuntu-latest'
        OS_TYPE: 'doxygen'
        OS_VERSION: focal
        artifactName: 'Linux-Ubuntu-20.04-x86_64'
        PACKAGE_TO_INSTALL: 'build/*.deb'
  pool:
    vmImage: $(imageName)
  steps:
  - checkout: self
    fetchDepth: 1
    clean: true
    persistCredentials: true
  - task: DownloadPipelineArtifact@2
    displayName: 'Get libiio artifacts'
    inputs:
      source: 'specific'
      project: '$(AnalogDevices_OpenSource_GUID)'
      pipeline: $(libiioPipelineId)
      artifact: '$(artifactName)'
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/master'
      path: '$(Agent.BuildDirectory)/s/build/'
  - script: ./CI/travis/before_install_linux
    displayName: "Install Dependencies"
  - script: ./CI/travis/make_linux
    displayName: "Build"
  - task: CopyFiles@2
    condition: ne(variables['System.JobName'], 'deploy_doxygen')
    inputs:
      sourceFolder: '$(Agent.BuildDirectory)/s/build/'
      contents: '$(Agent.BuildDirectory)/s/build/?(*.deb|*.rpm)'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishPipelineArtifact@1
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), ne(variables['System.JobName'], 'deploy_doxygen'))
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifactName: '$(artifactName)'

- job: macOSBuilds
  strategy:
    matrix:
      macOS_10_15:
        imageName: 'macOS-10.15'
        artifactName: 'macOS-10.15'
      macOS_11:
        imageName: 'macOS-11'
        artifactName: 'macOS-11'
  pool:
    vmImage: $(imageName)
  variables:
    PACKAGE_TO_INSTALL: 'build/*.pkg'
  steps:
  - checkout: self
    fetchDepth: 1
    clean: true
  - task: DownloadPipelineArtifact@2
    displayName: 'Get libiio artifacts'
    inputs:
      source: 'specific'
      project: '$(AnalogDevices_OpenSource_GUID)'
      pipeline: $(libiioPipelineId)
      artifact: '$(artifactName)'
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/master'
      path: '$(Agent.BuildDirectory)/s/build/'
  - script: ./CI/travis/before_install_darwin
    displayName: "Install Dependencies"
  - script: ./CI/travis/make_darwin
    displayName: "Build"
  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Agent.BuildDirectory)/s/build/'
      contents: '$(Agent.BuildDirectory)/s/build/?(*.pkg)'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Agent.BuildDirectory)/s/build_tar/'
      contents: '$(Agent.BuildDirectory)/s/build_tar/?(*.tar.gz)'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishPipelineArtifact@1
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifactName: '$(artifactName)'
