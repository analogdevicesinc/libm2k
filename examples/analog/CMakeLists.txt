cmake_minimum_required(VERSION 3.1.3)
set (CMAKE_CXX_STANDARD 11)
project(analog LANGUAGES CXX)

#Find libiio and link it to the targets generated by this project
find_path(IIO_INCLUDE_DIRS iio.h)

find_library(LIBM2K_LIBRARIES NAMES m2k libm2k REQUIRED)
find_path(LIBM2K_INCLUDE_DIRS libm2k/m2k.hpp)

if (NOT WIN32)
	find_library(PTHREAD_LIBRARIES pthread)
endif()

if (LIBM2K_VERSION)			# in-source build
	set(PROJECT_VERSION ${LIBM2K_VERSION})
	set(LIBM2K_LIBRARIES libm2k)
	set(LIBM2K_INCLUDE_DIRS "")
else()					# standalone build
	set(PROJECT_VERSION "1.0.0")
endif()

include_directories(
	${CMAKE_CURRENT_SOURCE_DIR}
	${CMAKE_SOURCE_DIR}/include
	${LIBM2K_INCLUDE_DIRS}
	${IIO_INCLUDE_DIRS}
)

add_executable(analog_in_out "analog_in_out.cpp")
add_executable(streaming_one_channel "streaming_one_channel.cpp")
add_executable(streaming_synchronized "streaming_synchronized.cpp")
add_executable(sync_stream_diff_frequencies "sync_stream_diff_frequencies.cpp")
add_executable(stream_test_adc "stream_test_adc.cpp")
add_executable(stream_test_dac "stream_test_dac.cpp")

target_link_libraries(analog_in_out ${LIBM2K_LIBRARIES})
target_link_libraries(streaming_one_channel ${LIBM2K_LIBRARIES})
target_link_libraries(streaming_synchronized ${LIBM2K_LIBRARIES})
target_link_libraries(sync_stream_diff_frequencies ${LIBM2K_LIBRARIES})
target_link_libraries(stream_test_adc ${LIBM2K_LIBRARIES})
target_link_libraries(stream_test_dac ${LIBM2K_LIBRARIES})

if (PTHREAD_LIBRARIES)
	target_link_libraries(sync_stream_diff_frequencies ${PTHREAD_LIBRARIES})
	target_link_libraries(stream_test_adc ${PTHREAD_LIBRARIES})
	target_link_libraries(stream_test_dac ${PTHREAD_LIBRARIES})
endif()




